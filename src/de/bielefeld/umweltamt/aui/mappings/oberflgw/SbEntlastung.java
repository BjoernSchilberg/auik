/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.oberflgw;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.elka.Referenz;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A class that represents a row in the SbEntlastung database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class SbEntlastung  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forSbEntlastung;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer nr;
    private Sonderbauwerk sonderbauwerk;
    private Integer lfdNr;
    private Integer typOpt;
    private boolean tauchwandTog;
    private boolean sonstigeBehTog;
    private Integer ausbUeberlaufOpt;
    private String sonstigeBehandlung;
    private boolean sbNichtInNrwTog;
    private boolean kaNichtInNrwTog;
    private String ausbUeberlaufSonstiges;
    private Set<Referenz> referenzsForQEntlNr = new HashSet<Referenz>(0);
    private Set<Referenz> referenzsForZEntlNr = new HashSet<Referenz>(0);

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public SbEntlastung() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public SbEntlastung(
    	Integer nr, Sonderbauwerk sonderbauwerk, boolean tauchwandTog, boolean sonstigeBehTog, boolean sbNichtInNrwTog, boolean kaNichtInNrwTog) {
        this.nr = nr;
        this.sonderbauwerk = sonderbauwerk;
        this.tauchwandTog = tauchwandTog;
        this.sonstigeBehTog = sonstigeBehTog;
        this.sbNichtInNrwTog = sbNichtInNrwTog;
        this.kaNichtInNrwTog = kaNichtInNrwTog;
    }

    /** Full constructor */
    public SbEntlastung(
    	Integer nr, Sonderbauwerk sonderbauwerk, Integer lfdNr, Integer typOpt, boolean tauchwandTog, boolean sonstigeBehTog, Integer ausbUeberlaufOpt, String sonstigeBehandlung, boolean sbNichtInNrwTog, boolean kaNichtInNrwTog, String ausbUeberlaufSonstiges, Set<Referenz> referenzsForQEntlNr, Set<Referenz> referenzsForZEntlNr) {
        this.nr = nr;
        this.sonderbauwerk = sonderbauwerk;
        this.lfdNr = lfdNr;
        this.typOpt = typOpt;
        this.tauchwandTog = tauchwandTog;
        this.sonstigeBehTog = sonstigeBehTog;
        this.ausbUeberlaufOpt = ausbUeberlaufOpt;
        this.sonstigeBehandlung = sonstigeBehandlung;
        this.sbNichtInNrwTog = sbNichtInNrwTog;
        this.kaNichtInNrwTog = kaNichtInNrwTog;
        this.ausbUeberlaufSonstiges = ausbUeberlaufSonstiges;
        this.referenzsForQEntlNr = referenzsForQEntlNr;
        this.referenzsForZEntlNr = referenzsForZEntlNr;
    }

    /* Setter and getter methods */
    public Integer getNr() {
        return this.nr;
    }

    public void setNr(Integer nr) {
        this.nr = nr;
    }

    public Sonderbauwerk getSonderbauwerk() {
        return this.sonderbauwerk;
    }

    public void setSonderbauwerk(Sonderbauwerk sonderbauwerk) {
        this.sonderbauwerk = sonderbauwerk;
    }

    public Integer getLfdNr() {
        return this.lfdNr;
    }

    public void setLfdNr(Integer lfdNr) {
        this.lfdNr = lfdNr;
    }

    public Integer getTypOpt() {
        return this.typOpt;
    }

    public void setTypOpt(Integer typOpt) {
        this.typOpt = typOpt;
    }

    public boolean isTauchwandTog() {
        return this.tauchwandTog;
    }

    public void setTauchwandTog(boolean tauchwandTog) {
        this.tauchwandTog = tauchwandTog;
    }

    public boolean isSonstigeBehTog() {
        return this.sonstigeBehTog;
    }

    public void setSonstigeBehTog(boolean sonstigeBehTog) {
        this.sonstigeBehTog = sonstigeBehTog;
    }

    public Integer getAusbUeberlaufOpt() {
        return this.ausbUeberlaufOpt;
    }

    public void setAusbUeberlaufOpt(Integer ausbUeberlaufOpt) {
        this.ausbUeberlaufOpt = ausbUeberlaufOpt;
    }

    public String getSonstigeBehandlung() {
        return this.sonstigeBehandlung;
    }

    public void setSonstigeBehandlung(String sonstigeBehandlung) {
        this.sonstigeBehandlung = sonstigeBehandlung;
    }

    public boolean isSbNichtInNrwTog() {
        return this.sbNichtInNrwTog;
    }

    public void setSbNichtInNrwTog(boolean sbNichtInNrwTog) {
        this.sbNichtInNrwTog = sbNichtInNrwTog;
    }

    public boolean isKaNichtInNrwTog() {
        return this.kaNichtInNrwTog;
    }

    public void setKaNichtInNrwTog(boolean kaNichtInNrwTog) {
        this.kaNichtInNrwTog = kaNichtInNrwTog;
    }

    public String getAusbUeberlaufSonstiges() {
        return this.ausbUeberlaufSonstiges;
    }

    public void setAusbUeberlaufSonstiges(String ausbUeberlaufSonstiges) {
        this.ausbUeberlaufSonstiges = ausbUeberlaufSonstiges;
    }

    public Set<Referenz> getReferenzsForQEntlNr() {
        return this.referenzsForQEntlNr;
    }

    public void setReferenzsForQEntlNr(Set<Referenz> referenzsForQEntlNr) {
        this.referenzsForQEntlNr = referenzsForQEntlNr;
    }

    public Set<Referenz> getReferenzsForZEntlNr() {
        return this.referenzsForZEntlNr;
    }

    public void setReferenzsForZEntlNr(Set<Referenz> referenzsForZEntlNr) {
        this.referenzsForZEntlNr = referenzsForZEntlNr;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("nr").append("='").append(getNr()).append("' ");			
        buffer.append("sonderbauwerk").append("='").append(getSonderbauwerk()).append("' ");			
        buffer.append("lfdNr").append("='").append(getLfdNr()).append("' ");			
        buffer.append("typOpt").append("='").append(getTypOpt()).append("' ");			
        buffer.append("tauchwandTog").append("='").append(isTauchwandTog()).append("' ");			
        buffer.append("sonstigeBehTog").append("='").append(isSonstigeBehTog()).append("' ");			
        buffer.append("ausbUeberlaufOpt").append("='").append(getAusbUeberlaufOpt()).append("' ");			
        buffer.append("sonstigeBehandlung").append("='").append(getSonstigeBehandlung()).append("' ");			
        buffer.append("sbNichtInNrwTog").append("='").append(isSbNichtInNrwTog()).append("' ");			
        buffer.append("kaNichtInNrwTog").append("='").append(isKaNichtInNrwTog()).append("' ");			
        buffer.append("ausbUeberlaufSonstiges").append("='").append(getAusbUeberlaufSonstiges()).append("' ");			
        buffer.append("referenzsForQEntlNr").append("='").append(getReferenzsForQEntlNr()).append("' ");			
        buffer.append("referenzsForZEntlNr").append("='").append(getReferenzsForZEntlNr()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof SbEntlastung)) return false;
        return (this.getNr().equals(
            ((SbEntlastung) other).getNr()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getNr() == null ?
            0 : this.getNr().hashCode();
        result = result * 37 + idValue;
        return result;
    }
    
    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>SbEntlastung</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static SbEntlastung merge(SbEntlastung detachedInstance) {
        log.debug("Merging SbEntlastung instance " + detachedInstance);
        return (SbEntlastung) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        SbEntlastung saved = SbEntlastung.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this SbEntlastung with its new values.<br>
     * This is meant to be used after merging!
     * @param copy SbEntlastung
     */
    private void copy(SbEntlastung copy) {
        this.nr = copy.getNr();            
        this.sonderbauwerk = copy.getSonderbauwerk();            
        this.lfdNr = copy.getLfdNr();            
        this.typOpt = copy.getTypOpt();            
        this.tauchwandTog = copy.isTauchwandTog();            
        this.sonstigeBehTog = copy.isSonstigeBehTog();            
        this.ausbUeberlaufOpt = copy.getAusbUeberlaufOpt();            
        this.sonstigeBehandlung = copy.getSonstigeBehandlung();            
        this.sbNichtInNrwTog = copy.isSbNichtInNrwTog();            
        this.kaNichtInNrwTog = copy.isKaNichtInNrwTog();            
        this.ausbUeberlaufSonstiges = copy.getAusbUeberlaufSonstiges();            
        this.referenzsForQEntlNr = copy.getReferenzsForQEntlNr();            
        this.referenzsForZEntlNr = copy.getReferenzsForZEntlNr();            
    }    

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(SbEntlastung detachedInstance) {
        log.debug("Deleting SbEntlastung instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return SbEntlastung.delete(this);
    }

    /**
     * Find an <code>SbEntlastung</code> instance by its primary key
     * @param id the primary key value
     * @return <code>SbEntlastung</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static SbEntlastung findById(long id) {
        log.debug("Getting SbEntlastung instance with id: " + id);
        return (SbEntlastung)
            new DatabaseAccess().get(SbEntlastung.class, id);
    }

    /**
     * Get a list of all <code>SbEntlastung</code>
     * @return <code>List&lt;SbEntlastung&gt;</code>
     *         all <code>SbEntlastung</code>
     */
    public static List<SbEntlastung> getAll() {
        return DatabaseQuery.getAll(new SbEntlastung());
    }

    /* Custom code goes below here! */

}
