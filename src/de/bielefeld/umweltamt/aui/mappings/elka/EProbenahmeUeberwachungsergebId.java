/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.elka;

import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import java.math.BigDecimal;

/**
 * A class that represents a row in the EProbenahmeUeberwachungsergebId database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class EProbenahmeUeberwachungsergebId  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forEProbenahmeUeberwachungsergebId;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer nr;
    private Integer probenahmeNr;
    private Integer stoffNr;
    private String gruppeDevId;
    private String regelwerkId;
    private String variantenId;
    private String trennNrOpt;
    private Integer messergebnisTextOpt;
    private BigDecimal wert;
    private Integer idElka;

    /** Default constructor */
    public EProbenahmeUeberwachungsergebId() {
        // This place is intentionally left blank.
    }


    /** Full constructor */
    public EProbenahmeUeberwachungsergebId(
        Integer nr, Integer probenahmeNr, Integer stoffNr, String gruppeDevId, String regelwerkId, String variantenId, String trennNrOpt, Integer messergebnisTextOpt, BigDecimal wert, Integer idElka) {
        this.nr = nr;
        this.probenahmeNr = probenahmeNr;
        this.stoffNr = stoffNr;
        this.gruppeDevId = gruppeDevId;
        this.regelwerkId = regelwerkId;
        this.variantenId = variantenId;
        this.trennNrOpt = trennNrOpt;
        this.messergebnisTextOpt = messergebnisTextOpt;
        this.wert = wert;
        this.idElka = idElka;
    }

    /* Setter and getter methods */
    public Integer getNr() {
        return this.nr;
    }

    public void setNr(Integer nr) {
        this.nr = nr;
    }

    public Integer getProbenahmeNr() {
        return this.probenahmeNr;
    }

    public void setProbenahmeNr(Integer probenahmeNr) {
        this.probenahmeNr = probenahmeNr;
    }

    public Integer getStoffNr() {
        return this.stoffNr;
    }

    public void setStoffNr(Integer stoffNr) {
        this.stoffNr = stoffNr;
    }

    public String getGruppeDevId() {
        return this.gruppeDevId;
    }

    public void setGruppeDevId(String gruppeDevId) {
        this.gruppeDevId = gruppeDevId;
    }

    public String getRegelwerkId() {
        return this.regelwerkId;
    }

    public void setRegelwerkId(String regelwerkId) {
        this.regelwerkId = regelwerkId;
    }

    public String getVariantenId() {
        return this.variantenId;
    }

    public void setVariantenId(String variantenId) {
        this.variantenId = variantenId;
    }

    public String getTrennNrOpt() {
        return this.trennNrOpt;
    }

    public void setTrennNrOpt(String trennNrOpt) {
        this.trennNrOpt = trennNrOpt;
    }

    public Integer getMessergebnisTextOpt() {
        return this.messergebnisTextOpt;
    }

    public void setMessergebnisTextOpt(Integer messergebnisTextOpt) {
        this.messergebnisTextOpt = messergebnisTextOpt;
    }

    public BigDecimal getWert() {
        return this.wert;
    }

    public void setWert(BigDecimal wert) {
        this.wert = wert;
    }

    public Integer getIdElka() {
        return this.idElka;
    }

    public void setIdElka(Integer idElka) {
        this.idElka = idElka;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("nr").append("='").append(getNr()).append("' ");			
        buffer.append("probenahmeNr").append("='").append(getProbenahmeNr()).append("' ");			
        buffer.append("stoffNr").append("='").append(getStoffNr()).append("' ");			
        buffer.append("gruppeDevId").append("='").append(getGruppeDevId()).append("' ");			
        buffer.append("regelwerkId").append("='").append(getRegelwerkId()).append("' ");			
        buffer.append("variantenId").append("='").append(getVariantenId()).append("' ");			
        buffer.append("trennNrOpt").append("='").append(getTrennNrOpt()).append("' ");			
        buffer.append("messergebnisTextOpt").append("='").append(getMessergebnisTextOpt()).append("' ");			
        buffer.append("wert").append("='").append(getWert()).append("' ");			
        buffer.append("idElka").append("='").append(getIdElka()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    /* Custom code goes below here! */

}
