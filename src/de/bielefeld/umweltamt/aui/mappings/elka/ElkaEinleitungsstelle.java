/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.elka;

import de.bielefeld.umweltamt.aui.HibernateSessionFactory;
import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.basis.BasisObjekt;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A class that represents a row in the ElkaEinleitungsstelle database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class ElkaEinleitungsstelle  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forIndeinlGenehmigung;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private Integer objektid;
    private BasisObjekt basisObjekt;
    private Date aktualDat;
    private Date erstellDat;
    private String herkunft;
    private String bezeichnung;
    private String gewaessernameAlias3;
    private String gewaessernameNs;
    private String nadiaId;
    private Date stillgelegtAm;
    private Boolean typIndirekt;
    private Boolean typIndGewDirekt;
    private Boolean typKommTrenn;
    private Boolean typPrivatTrenn;
    private Boolean typSonstige;
    private Boolean typAusserortStrasseneinl;
    private Double stationierungNs3;
    private Double einzugsgebiet;
    private Double stationierungSt3;
    private Integer abgaberelEinl;
    private Integer e32;
    private Integer n32;
    private Integer kanalArtOpt;
    private Integer stationierung3Opt;
    private Integer schutzzoneOpt;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public ElkaEinleitungsstelle() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public ElkaEinleitungsstelle(
        BasisObjekt basisObjekt, boolean enabled, boolean deleted) {
        this.basisObjekt = basisObjekt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public ElkaEinleitungsstelle(
        BasisObjekt basisObjekt, Date aktualDat, Date erstellDat, String herkunft, String bezeichnung, String gewaessernameAlias3, String gewaessernameNs, String nadiaId, Date stillgelegtAm, Boolean typIndirekt, Boolean typIndGewDirekt, Boolean typKommTrenn, Boolean typPrivatTrenn, Boolean typSonstige, Boolean typAusserortStrasseneinl, Double stationierungNs3, Double einzugsgebiet, Double stationierungSt3, Integer abgaberelEinl, Integer e32, Integer n32, Integer kanalArtOpt, Integer stationierung3Opt, Integer schutzzoneOpt,  boolean enabled, boolean deleted) {
        this.basisObjekt = basisObjekt;
        this.aktualDat = aktualDat;
        this.erstellDat = erstellDat;
        this.herkunft = herkunft;
        this.bezeichnung = bezeichnung;
        this.gewaessernameAlias3 = gewaessernameAlias3;
        this.gewaessernameNs = gewaessernameNs;
        this.nadiaId = nadiaId;
        this.stillgelegtAm = stillgelegtAm;
        this.typIndirekt = typIndirekt;
        this.typIndGewDirekt = typIndGewDirekt;
        this.typKommTrenn = typKommTrenn;
        this.typPrivatTrenn = typPrivatTrenn;
        this.typSonstige = typSonstige;
        this.typAusserortStrasseneinl = typAusserortStrasseneinl;
        this.stationierungNs3 = stationierungNs3;
        this.einzugsgebiet = einzugsgebiet;
        this.stationierungSt3 = stationierungSt3;
        this.abgaberelEinl = abgaberelEinl;
        this.e32 = e32;
        this.n32 = n32;
        this.kanalArtOpt = kanalArtOpt;
        this.stationierung3Opt = stationierung3Opt;
        this.schutzzoneOpt = schutzzoneOpt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getObjektid() {
        return this.objektid;
    }

    public void setObjektid(Integer objektid) {
        this.objektid = objektid;
    }

    public BasisObjekt getBasisObjekt() {
        return this.basisObjekt;
    }

    public void setBasisObjekt(BasisObjekt basisObjekt) {
        this.basisObjekt = basisObjekt;
    }

    public Date getAktualDat() {
		return aktualDat;
	}

	public void setAktualDat(Date aktualDat) {
		this.aktualDat = aktualDat;
	}

	public Date getErstellDat() {
		return erstellDat;
	}

	public void setErstellDat(Date erstellDat) {
		this.erstellDat = erstellDat;
	}

	public String getHerkunft() {
		return herkunft;
	}

	public void setHerkunft(String herkunft) {
		this.herkunft = herkunft;
	}

	public String getBezeichnung() {
		return bezeichnung;
	}

	public void setBezeichnung(String bezeichnung) {
		this.bezeichnung = bezeichnung;
	}

	public String getGewaessernameAlias3() {
		return gewaessernameAlias3;
	}

	public void setGewaessernameAlias3(String gewaessernameAlias3) {
		this.gewaessernameAlias3 = gewaessernameAlias3;
	}

	public String getGewaessernameNs() {
		return gewaessernameNs;
	}

	public void setGewaessernameNs(String gewaessernameNs) {
		this.gewaessernameNs = gewaessernameNs;
	}

	public String getNadiaId() {
		return nadiaId;
	}

	public void setNadiaId(String nadiaId) {
		this.nadiaId = nadiaId;
	}

	public Date getStillgelegtAm() {
		return stillgelegtAm;
	}

	public void setStillgelegtAm(Date stillgelegtAm) {
		this.stillgelegtAm = stillgelegtAm;
	}

	public Boolean getTypIndirekt() {
		return typIndirekt;
	}

	public void setTypIndirekt(Boolean typIndirekt) {
		this.typIndirekt = typIndirekt;
	}

	public Boolean getTypIndGewDirekt() {
		return typIndGewDirekt;
	}

	public void setTypIndGewDirekt(Boolean typIndGewDirekt) {
		this.typIndGewDirekt = typIndGewDirekt;
	}

	public Boolean getTypKommTrenn() {
		return typKommTrenn;
	}

	public void setTypKommTrenn(Boolean typKommTrenn) {
		this.typKommTrenn = typKommTrenn;
	}

	public Boolean getTypPrivatTrenn() {
		return typPrivatTrenn;
	}

	public void setTypPrivatTrenn(Boolean typPrivatTrenn) {
		this.typPrivatTrenn = typPrivatTrenn;
	}

	public Boolean getTypSonstige() {
		return typSonstige;
	}

	public void setTypSonstige(Boolean typSonstige) {
		this.typSonstige = typSonstige;
	}

	public Boolean getTypAusserortStrasseneinl() {
		return typAusserortStrasseneinl;
	}

	public void setTypAusserortStrasseneinl(Boolean typAusserortStrasseneinl) {
		this.typAusserortStrasseneinl = typAusserortStrasseneinl;
	}

	public Double getStationierungNs3() {
		return stationierungNs3;
	}

	public void setStationierungNs3(Double stationierungNs3) {
		this.stationierungNs3 = stationierungNs3;
	}

	public Double getEinzugsgebiet() {
		return einzugsgebiet;
	}

	public void setEinzugsgebiet(Double einzugsgebiet) {
		this.einzugsgebiet = einzugsgebiet;
	}

	public Double getStationierungSt3() {
		return stationierungSt3;
	}

	public void setStationierungSt3(Double stationierungSt3) {
		this.stationierungSt3 = stationierungSt3;
	}

	public Integer getAbgaberelEinl() {
		return abgaberelEinl;
	}

	public void setAbgaberelEinl(Integer abgaberelEinl) {
		this.abgaberelEinl = abgaberelEinl;
	}

	public Integer getE32() {
		return e32;
	}

	public void setE32(Integer e32) {
		this.e32 = e32;
	}

	public Integer getN32() {
		return n32;
	}

	public void setN32(Integer n32) {
		this.n32 = n32;
	}

	public Integer getKanalArtOpt() {
		return kanalArtOpt;
	}

	public void setKanalArtOpt(Integer kanalArtOpt) {
		this.kanalArtOpt = kanalArtOpt;
	}

	public Integer getStationierung3Opt() {
		return stationierung3Opt;
	}

	public void setStationierung3Opt(Integer stationierung3Opt) {
		this.stationierung3Opt = stationierung3Opt;
	}

	public Integer getSchutzzoneOpt() {
		return schutzzoneOpt;
	}

	public void setSchutzzoneOpt(Integer schutzzoneOpt) {
		this.schutzzoneOpt = schutzzoneOpt;
	}

	public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("basisObjekt").append("='").append(getBasisObjekt()).append("' ");			
        buffer.append("aktualDat").append("='").append(getAktualDat()).append("' ");			
        buffer.append("erstellDat").append("='").append(getErstellDat()).append("' ");			
        buffer.append("herkunft").append("='").append(getHerkunft()).append("' ");			
        buffer.append("bezeichnung").append("='").append(getBezeichnung()).append("' ");			
        buffer.append("gewaessernameAlias3").append("='").append(getGewaessernameAlias3()).append("' ");			
        buffer.append("gewaessernameNs").append("='").append(getGewaessernameNs()).append("' ");			
        buffer.append("nadiaId").append("='").append(getNadiaId()).append("' ");			
        buffer.append("stillgelegtAm").append("='").append(getStillgelegtAm()).append("' ");			
        buffer.append("typIndirekt").append("='").append(getTypIndirekt()).append("' ");			
        buffer.append("typIndGewDirekt").append("='").append(getTypIndGewDirekt()).append("' ");			
        buffer.append("typKommTrenn").append("='").append(getTypKommTrenn()).append("' ");			
        buffer.append("typPrivatTrenn").append("='").append(getTypPrivatTrenn()).append("' ");			
        buffer.append("typSonstige").append("='").append(getTypSonstige()).append("' ");			
        buffer.append("tyAusserortStrasseneinl").append("='").append(getTypAusserortStrasseneinl()).append("' ");			
        buffer.append("stationierungNs3").append("='").append(getStationierungNs3()).append("' ");			
        buffer.append("einzugsgebiet").append("='").append(getEinzugsgebiet()).append("' ");
        buffer.append("stationierungSt3").append("='").append(getStationierungSt3()).append("' ");			
        buffer.append("abgaberelEinl").append("='").append(getAbgaberelEinl()).append("' ");			
        buffer.append("e32").append("='").append(getE32()).append("' ");			
        buffer.append("n32").append("='").append(getN32()).append("' ");			
        buffer.append("kanalArtOpt").append("='").append(getKanalArtOpt()).append("' ");			
        buffer.append("stationierung3Opt").append("='").append(getStationierung3Opt()).append("' ");			
        buffer.append("schutzzoneOpt").append("='").append(getSchutzzoneOpt()).append("' ");		
        buffer.append("enabled").append("='").append(isEnabled()).append("' ");			
        buffer.append("deleted").append("='").append(isDeleted()).append("' ");				
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof ElkaEinleitungsstelle)) return false;
        return (this.getObjektid().equals(
            ((ElkaEinleitungsstelle) other).getObjektid()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getObjektid() == null ?
            0 : this.getObjektid().hashCode();
        result = result * 37 + idValue;
        return result;
    }
    
    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>IndeinlGenehmigung</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static ElkaEinleitungsstelle merge(ElkaEinleitungsstelle detachedInstance) {
        log.debug("Merging IndeinlGenehmigung instance " + detachedInstance);
        return (ElkaEinleitungsstelle) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        ElkaEinleitungsstelle saved = ElkaEinleitungsstelle.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this ElkaEinleitungsstelle with its new values.<br>
     * This is meant to be used after merging!
     * @param copy ElkaEinleitungsstelle
     */
    private void copy(ElkaEinleitungsstelle copy) {
        this.basisObjekt = copy.getBasisObjekt();            
        this.aktualDat = copy.getAktualDat();            
        this.erstellDat = copy.getErstellDat();            
        this.herkunft = copy.getHerkunft();            
        this.bezeichnung = copy.getBezeichnung();            
        this.gewaessernameAlias3 = copy.getGewaessernameAlias3();            
        this.gewaessernameNs = copy.getGewaessernameNs();            
        this.nadiaId = copy.getNadiaId();            
        this.stillgelegtAm = copy.getStillgelegtAm();            
        this.typIndirekt = copy.getTypIndirekt();            
        this.typIndGewDirekt = copy.getTypIndGewDirekt();            
        this.typKommTrenn = copy.getTypKommTrenn();            
        this.typPrivatTrenn = copy.getTypPrivatTrenn();       
        this.typSonstige = copy.getTypSonstige();            
        this.typAusserortStrasseneinl = copy.getTypAusserortStrasseneinl();            
        this.stationierungNs3 = copy.getStationierungNs3();            
        this.einzugsgebiet = copy.getEinzugsgebiet();            
        this.stationierungSt3 = copy.getStationierungSt3();            
        this.abgaberelEinl = copy.getAbgaberelEinl();            
        this.e32 = copy.getE32();            
        this.n32 = copy.getN32();            
        this.kanalArtOpt = copy.getKanalArtOpt();            
        this.stationierung3Opt = copy.getStationierung3Opt();            
        this.schutzzoneOpt = copy.getSchutzzoneOpt();          
        this.enabled = copy.isEnabled();            
        this.deleted = copy.isDeleted();                    
    }    

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(ElkaEinleitungsstelle detachedInstance) {
        log.debug("Deleting IndeinlGenehmigung instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return ElkaEinleitungsstelle.delete(this);
    }

    /**
     * Find an <code>ElkaEinleitungsstelle</code> instance by its primary key
     * @param id the primary key value
     * @return <code>ElkaEinleitungsstelle</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static ElkaEinleitungsstelle findById(java.lang.Integer id) {
        log.debug("Getting BasisWasserrecht instance with id: " + id);
        return (ElkaEinleitungsstelle)
            new DatabaseAccess().get(ElkaEinleitungsstelle.class, id);
    }

    /**
     * Get a list of all <code>BasisWasserrecht</code>
     * @return <code>List&lt;BasisWasserrecht&gt;</code>
     *         all <code>BasisWasserrechtwerning</code>
     */
    public static List<ElkaEinleitungsstelle> getAll() {
        return DatabaseQuery.getAll(new ElkaEinleitungsstelle());
    }

    /* Custom code goes below here! */
    public static ElkaEinleitungsstelle findByObjektId(java.lang.Integer id) {
        BasisObjekt objekt = (BasisObjekt) HibernateSessionFactory.currentSession().createQuery("from BasisObjekt where id= " + id).list().get(0);
        Set<ElkaEinleitungsstelle> list = objekt.getElkaEinleitungsstelles();
        return list.iterator().next();
    }
}
