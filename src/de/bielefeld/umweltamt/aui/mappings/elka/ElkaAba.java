/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.elka;

import de.bielefeld.umweltamt.aui.HibernateSessionFactory;
import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.basis.BasisObjekt;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A class that represents a row in the ElkaAba database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class ElkaAba  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forIndeinlGenehmigung;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private Integer objektid;
    private BasisObjekt basisObjekt;
    private Integer ansprAdrId;
    private Date aktualDat;
    private Date erstellDat;
    private String herkunft;
    private String bezeichnung;
    private Date inbetriebDat;
    private Date stillgelegtDat;
    private Boolean genehmpflichtigToc;
    private Integer e32;
    private Integer n32;
    private Integer sonstZulOpt;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public ElkaAba() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public ElkaAba(
        BasisObjekt basisObjekt, boolean enabled, boolean deleted) {
        this.basisObjekt = basisObjekt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public ElkaAba(
        BasisObjekt basisObjekt, Integer ansprAdrId, Date aktualDat, Date erstellDat, String herkunft, String bezeichnung, Date inbetriebDat, Date stillgelegtDat, Boolean genehmpflichtigToc, Integer e32, Integer n32, Integer sonstZulOpt, boolean enabled, boolean deleted, Integer uebergabestelleE32, Integer uebergabestelleN32) {
        this.basisObjekt = basisObjekt;
        this.ansprAdrId = ansprAdrId;
        this.aktualDat = aktualDat;
        this.erstellDat = erstellDat;
        this.herkunft = herkunft;
        this.bezeichnung = bezeichnung;
        this.inbetriebDat = inbetriebDat;
        this.stillgelegtDat = stillgelegtDat;
        this.genehmpflichtigToc = genehmpflichtigToc;
        this.e32 = e32;
        this.n32 = n32;
        this.sonstZulOpt = sonstZulOpt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getObjektid() {
        return this.objektid;
    }

    public void setObjektid(Integer objektid) {
        this.objektid = objektid;
    }

    public BasisObjekt getBasisObjekt() {
        return this.basisObjekt;
    }

    public void setBasisObjekt(BasisObjekt basisObjekt) {
        this.basisObjekt = basisObjekt;
    }
    
        public Integer getAnsprAdrId() {
		return ansprAdrId;
	}

	public void setAnsprAdrId(Integer ansprAdrId) {
		this.ansprAdrId = ansprAdrId;
	}

	public Date getAktualDat() {
		return aktualDat;
	}

	public void setAktualDat(Date aktualDat) {
		this.aktualDat = aktualDat;
	}

	public Date getErstellDat() {
		return erstellDat;
	}

	public void setErstellDat(Date erstellDat) {
		this.erstellDat = erstellDat;
	}

	public String getHerkunft() {
		return herkunft;
	}

	public void setHerkunft(String herkunft) {
		this.herkunft = herkunft;
	}

	public String getBezeichnung() {
		return bezeichnung;
	}

	public void setBezeichnung(String bezeichnung) {
		this.bezeichnung = bezeichnung;
	}

	public Date getInbetriebDat() {
		return inbetriebDat;
	}

	public void setInbetriebDat(Date inbetriebDat) {
		this.inbetriebDat = inbetriebDat;
	}

	public Date getStillgelegtDat() {
		return stillgelegtDat;
	}

	public void setStillgelegtDat(Date stillgelegtDat) {
		this.stillgelegtDat = stillgelegtDat;
	}

	public Boolean getGenehmpflichtigToc() {
		return genehmpflichtigToc;
	}

	public void setGenehmpflichtigToc(Boolean genehmpflichtigToc) {
		this.genehmpflichtigToc = genehmpflichtigToc;
	}

	public Integer getE32() {
		return e32;
	}

	public void setE32(Integer e32) {
		this.e32 = e32;
	}

	public Integer getN32() {
		return n32;
	}

	public void setN32(Integer n32) {
		this.n32 = n32;
	}

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public Integer getSonstZulOpt() {
		return sonstZulOpt;
	}

	public void setSonstZulOpt(Integer sonstZulOpt) {
		this.sonstZulOpt = sonstZulOpt;
	}

	public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

	/**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("basisObjekt").append("='").append(getBasisObjekt()).append("' ");			
        buffer.append("ansprAdrId").append("='").append(getAnsprAdrId()).append("' ");			
        buffer.append("aktualDat").append("='").append(getAktualDat()).append("' ");			
        buffer.append("erstellDat").append("='").append(getErstellDat()).append("' ");			
        buffer.append("herkunft").append("='").append(getHerkunft()).append("' ");			
        buffer.append("bezeichnung").append("='").append(getBezeichnung()).append("' ");			
        buffer.append("inbetriebDat").append("='").append(getInbetriebDat()).append("' ");			
        buffer.append("stillgelegtDat").append("='").append(getStillgelegtDat()).append("' ");			
        buffer.append("genehmpflichtigToc").append("='").append(getGenehmpflichtigToc()).append("' ");			
        buffer.append("e32").append("='").append(getE32()).append("' ");			
        buffer.append("n32").append("='").append(getN32()).append("' ");			
        buffer.append("sonstZulOpt").append("='").append(getSonstZulOpt()).append("' ");			
        buffer.append("enabled").append("='").append(isEnabled()).append("' ");			
        buffer.append("deleted").append("='").append(isDeleted()).append("' ");		
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof ElkaAba)) return false;
        return (this.getObjektid().equals(
            ((ElkaAba) other).getObjektid()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getObjektid() == null ?
            0 : this.getObjektid().hashCode();
        result = result * 37 + idValue;
        return result;
    }
    
    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>ElkaAba</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static ElkaAba merge(ElkaAba detachedInstance) {
        log.debug("Merging IndeinlGenehmigung instance " + detachedInstance);
        return (ElkaAba) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        ElkaAba saved = ElkaAba.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this ElkaAba with its new values.<br>
     * This is meant to be used after merging!
     * @param copy ElkaAba
     */
    private void copy(ElkaAba copy) {
        this.basisObjekt = copy.getBasisObjekt();            
        this.ansprAdrId = copy.getAnsprAdrId();            
        this.aktualDat = copy.getAktualDat();            
        this.erstellDat = copy.getErstellDat();            
        this.herkunft = copy.getHerkunft();            
        this.bezeichnung = copy.getBezeichnung();            
        this.inbetriebDat = copy.getInbetriebDat();            
        this.stillgelegtDat = copy.getStillgelegtDat();            
        this.genehmpflichtigToc = copy.getGenehmpflichtigToc();            
        this.e32 = copy.getE32();            
        this.n32 = copy.getN32();            
        this.sonstZulOpt = copy.getSonstZulOpt();         
        this.enabled = copy.isEnabled();            
        this.deleted = copy.isDeleted();                       
    }    

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(ElkaAba detachedInstance) {
        log.debug("Deleting IndeinlGenehmigung instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return ElkaAba.delete(this);
    }

    /**
     * Find an <code>ElkaAba</code> instance by its primary key
     * @param id the primary key value
     * @return <code>ElkaAba</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static ElkaAba findById(java.lang.Integer id) {
        log.debug("Getting BasisWasserrecht instance with id: " + id);
        return (ElkaAba)
            new DatabaseAccess().get(ElkaAba.class, id);
    }

    /**
     * Get a list of all <code>ElkaAba</code>
     * @return <code>List&lt;ElkaAba;</code>
     *         all <code>ElkaAba</code>
     */
    public static List<ElkaAba> getAll() {
        return DatabaseQuery.getAll(new ElkaAba());
    }

    /* Custom code goes below here! */
    public static ElkaAba findByObjektId(java.lang.Integer id) {
        BasisObjekt objekt = (BasisObjekt) HibernateSessionFactory.currentSession().createQuery("from BasisObjekt where id= " + id).list().get(0);
        Set<ElkaAba> list = objekt.getElkaAbas();
        return list.iterator().next();
    }
}
