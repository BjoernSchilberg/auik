/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.elka;

import de.bielefeld.umweltamt.aui.HibernateSessionFactory;
import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.basis.BasisObjekt;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A class that represents a row in the ElkaAnfallstelle database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class ElkaAnfallstelle  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forIndeinlGenehmigung;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private Integer objektid;
    private BasisObjekt basisObjekt;
    private Integer seqId;
    private Date aktualDat;
    private Date erstellDat;
    private String anhangId;
    private String herkunft;
    private String anwendungsbereich;
    private String bezeichnung;
    private Date stillgelegtAm;
    private Integer abwaBeschaffOpt;
    private Integer betriebsweiseOpt;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public ElkaAnfallstelle() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public ElkaAnfallstelle(
        BasisObjekt basisObjekt, boolean enabled, boolean deleted) {
        this.basisObjekt = basisObjekt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public ElkaAnfallstelle(
        BasisObjekt basisObjekt, Integer seqId, Date aktualDat, Date erstellDat, String anhangId, String anwendungsbereich, String bezeichnung, Integer abwaBeschaffOpt, Integer betriebsweiseOpt, Date stillgelegtAm, boolean enabled, boolean deleted) {
        this.basisObjekt = basisObjekt;
        this.seqId = seqId;
        this.aktualDat = aktualDat;
        this.erstellDat = erstellDat;
        this.anhangId = anhangId;
        this.herkunft = anhangId;
        this.anwendungsbereich = anwendungsbereich;
        this.bezeichnung = bezeichnung;
        this.stillgelegtAm = stillgelegtAm;
        this.abwaBeschaffOpt = abwaBeschaffOpt;
        this.betriebsweiseOpt = betriebsweiseOpt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getObjektid() {
        return this.objektid;
    }

    public void setObjektid(Integer objektid) {
        this.objektid = objektid;
    }

    public BasisObjekt getBasisObjekt() {
        return this.basisObjekt;
    }

    public void setBasisObjekt(BasisObjekt basisObjekt) {
        this.basisObjekt = basisObjekt;
    }
    
    public Integer getSeqId() {
		return seqId;
	}

	public void setSeqId(Integer seqId) {
		this.seqId = seqId;
	}

	public Date getAktualDat() {
		return aktualDat;
	}

	public void setAktualDat(Date aktualDat) {
		this.aktualDat = aktualDat;
	}

	public Date getErstellDat() {
		return erstellDat;
	}

	public void setErstellDat(Date erstellDat) {
		this.erstellDat = erstellDat;
	}

	public String getAnhangId() {
		return anhangId;
	}

	public void setAnhangId(String anhangId) {
		this.anhangId = anhangId;
	}

	public String getHerkunft() {
		return herkunft;
	}

	public void setHerkunft(String herkunft) {
		this.herkunft = herkunft;
	}

	public String getAnwendungsbereich() {
		return anwendungsbereich;
	}

	public void setAnwendungsbereich(String anwendungsbereich) {
		this.anwendungsbereich = anwendungsbereich;
	}

	public String getBezeichnung() {
		return bezeichnung;
	}

	public void setBezeichnung(String bezeichnung) {
		this.bezeichnung = bezeichnung;
	}

	public Date getStillgelegtAm() {
		return stillgelegtAm;
	}

	public void setStillgelegtAm(Date stillgelegtAm) {
		this.stillgelegtAm = stillgelegtAm;
	}

	public Integer getAbwaBeschaffOpt() {
		return abwaBeschaffOpt;
	}

	public void setAbwaBeschaffOpt(Integer abwaBeschaffOpt) {
		this.abwaBeschaffOpt = abwaBeschaffOpt;
	}

	public Integer getBetriebsweiseOpt() {
		return betriebsweiseOpt;
	}

	public void setBetriebsweiseOpt(Integer betriebsweiseOpt) {
		this.betriebsweiseOpt = betriebsweiseOpt;
	}

	public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("basisObjekt").append("='").append(getBasisObjekt()).append("' ");			
        buffer.append("seqId").append("='").append(getSeqId()).append("' ");			
        buffer.append("aktualDat").append("='").append(getAktualDat()).append("' ");			
        buffer.append("erstellDat").append("='").append(getErstellDat()).append("' ");			
        buffer.append("herkunft").append("='").append(getHerkunft()).append("' ");			
        buffer.append("anwendungsbereich").append("='").append(getAnwendungsbereich()).append("' ");			
        buffer.append("bezeichnung").append("='").append(getBezeichnung()).append("' ");			
        buffer.append("stillgelegtAm").append("='").append(getStillgelegtAm()).append("' ");			
        buffer.append("abwaBeschaffOpt").append("='").append(getAbwaBeschaffOpt()).append("' ");			
        buffer.append("betriebsweiseOpt").append("='").append(getBetriebsweiseOpt()).append("' ");			
        buffer.append("enabled").append("='").append(isEnabled()).append("' ");			
        buffer.append("deleted").append("='").append(isDeleted()).append("' ");					
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof ElkaAnfallstelle)) return false;
        return (this.getObjektid().equals(
            ((ElkaAnfallstelle) other).getObjektid()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getObjektid() == null ?
            0 : this.getObjektid().hashCode();
        result = result * 37 + idValue;
        return result;
    }
    
    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>ElkaAnfallstelle</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static ElkaAnfallstelle merge(ElkaAnfallstelle detachedInstance) {
        log.debug("Merging IndeinlGenehmigung instance " + detachedInstance);
        return (ElkaAnfallstelle) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        ElkaAnfallstelle saved = ElkaAnfallstelle.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this ElkaAnfallstelle with its new values.<br>
     * This is meant to be used after merging!
     * @param copy ElkaAnfallstelle
     */
    private void copy(ElkaAnfallstelle copy) {
        this.basisObjekt = copy.getBasisObjekt();            
        this.seqId = copy.getSeqId();            
        this.aktualDat = copy.getAktualDat();            
        this.erstellDat = copy.getErstellDat();            
        this.anhangId = copy.getAnhangId();            
        this.herkunft = copy.getHerkunft();            
        this.anwendungsbereich = copy.getAnwendungsbereich();            
        this.bezeichnung = copy.getBezeichnung();            
        this.stillgelegtAm = copy.getStillgelegtAm();            
        this.abwaBeschaffOpt = copy.getAbwaBeschaffOpt();            
        this.betriebsweiseOpt = copy.getBetriebsweiseOpt();                     
        this.enabled = copy.isEnabled();            
        this.deleted = copy.isDeleted();                       
    }    

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(ElkaAnfallstelle detachedInstance) {
        log.debug("Deleting IndeinlGenehmigung instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return ElkaAnfallstelle.delete(this);
    }

    /**
     * Find an <code>ElkaAnfallstelle</code> instance by its primary key
     * @param id the primary key value
     * @return <code>ElkaAnfallstelle</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static ElkaAnfallstelle findById(java.lang.Integer id) {
        log.debug("Getting BasisWasserrecht instance with id: " + id);
        return (ElkaAnfallstelle)
            new DatabaseAccess().get(ElkaAnfallstelle.class, id);
    }

    /**
     * Get a list of all <code>ElkaAnfallstelle</code>
     * @return <code>List&lt;ElkaAnfallstelle;</code>
     *         all <code>ElkaAnfallstelle</code>
     */
    public static List<ElkaAnfallstelle> getAll() {
        return DatabaseQuery.getAll(new ElkaAnfallstelle());
    }

    /* Custom code goes below here! */
    public static ElkaAnfallstelle findByObjektId(java.lang.Integer id) {
        BasisObjekt objekt = (BasisObjekt) HibernateSessionFactory.currentSession().createQuery("from BasisObjekt where id= " + id).list().get(0);
        Set<ElkaAnfallstelle> list = objekt.getElkaAnfallstelles();
        return list.iterator().next();
    }
}
