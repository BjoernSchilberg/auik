package de.bielefeld.umweltamt.aui.mappings.elka;

// Generated 20.12.2017 13:49:12 by Hibernate Tools 5.2.6.Final

import java.util.Date;
import java.util.List;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.atl.AtlKlaeranlagen;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;

/**
 * ElkaReferenz generated by hbm2java
 */
public class ElkaReferenz implements java.io.Serializable {
    
    private static final long serialVersionUID =
	        DatabaseSerialVersionUID.forIndeinlGenehmigung;
    
	private Integer nr;
	private Boolean fsTog;
	private Integer standortNr;
	private Integer QAbaNr;
	private ElkaEinleitungsstelle QElsNr;
	private Integer QAfsNr;
	private Integer QMsstNr;
	private Integer QSbNr;
	private Integer QNwAfsNr;
	private Integer QEntlNr;
	private Integer QKkaNr;
	private AtlKlaeranlagen QKaNr;
	private Integer ZAbaNr;
	private ElkaEinleitungsstelle ZElsNr;
	private Integer ZAfsNr;
	private Integer ZMsstNr;
	private Integer ZSbNr;
	private Integer ZNwAfsNr;
	private Integer ZEntlNr;
	private Integer ZKkaNr;
	private AtlKlaeranlagen ZKaNr;
	private Date aktualDat;
	private Date erstellDat;
	
	/** Logging */
	private static final AuikLogger log = AuikLogger.getLogger();

	public ElkaReferenz() {
	}


	public ElkaReferenz(Boolean fsTog, Integer standortNr, Integer QAbaNr, ElkaEinleitungsstelle QElsNr, Integer QAfsNr,
			Integer QMsstNr, Integer QSbNr, Integer QNwAfsNr, Integer QEntlNr, Integer QKkaNr, AtlKlaeranlagen QKaNr,
			Integer ZAbaNr, ElkaEinleitungsstelle ZElsNr, Integer ZAfsNr, Integer ZMsstNr, Integer ZSbNr, Integer ZNwAfsNr,
			Integer ZEntlNr, Integer ZKkaNr, AtlKlaeranlagen ZKaNr, Date aktualDat, Date erstellDat) {
		this.fsTog = fsTog;
		this.standortNr = standortNr;
		this.QAbaNr = QAbaNr;
		this.QElsNr = QElsNr;
		this.QAfsNr = QAfsNr;
		this.QMsstNr = QMsstNr;
		this.QSbNr = QSbNr;
		this.QNwAfsNr = QNwAfsNr;
		this.QEntlNr = QEntlNr;
		this.QKkaNr = QKkaNr;
		this.QKaNr = QKaNr;
		this.ZAbaNr = ZAbaNr;
		this.ZElsNr = ZElsNr;
		this.ZAfsNr = ZAfsNr;
		this.ZMsstNr = ZMsstNr;
		this.ZSbNr = ZSbNr;
		this.ZNwAfsNr = ZNwAfsNr;
		this.ZEntlNr = ZEntlNr;
		this.ZKkaNr = ZKkaNr;
		this.ZKaNr = ZKaNr;
		this.aktualDat = aktualDat;
		this.erstellDat = erstellDat;
	}

	public Integer getNr() {
		return this.nr;
	}

	public void setNr(int nr) {
		this.nr = nr;
	}

	public Boolean getFsTog() {
		return this.fsTog;
	}

	public void setFsTog(Boolean fsTog) {
		this.fsTog = fsTog;
	}

	public Integer getStandortNr() {
		return this.standortNr;
	}

	public void setStandortNr(Integer standortNr) {
		this.standortNr = standortNr;
	}

	public Integer getQAbaNr() {
		return this.QAbaNr;
	}

	public void setQAbaNr(Integer QAbaNr) {
		this.QAbaNr = QAbaNr;
	}

	public ElkaEinleitungsstelle getQElsNr() {
		return this.QElsNr;
	}

	public void setQElsNr(ElkaEinleitungsstelle QElsNr) {
		this.QElsNr = QElsNr;
	}

	public Integer getQAfsNr() {
		return this.QAfsNr;
	}

	public void setQAfsNr(Integer QAfsNr) {
		this.QAfsNr = QAfsNr;
	}

	public Integer getQMsstNr() {
		return this.QMsstNr;
	}

	public void setQMsstNr(Integer QMsstNr) {
		this.QMsstNr = QMsstNr;
	}

	public Integer getQSbNr() {
		return this.QSbNr;
	}

	public void setQSbNr(Integer QSbNr) {
		this.QSbNr = QSbNr;
	}

	public Integer getQNwAfsNr() {
		return this.QNwAfsNr;
	}

	public void setQNwAfsNr(Integer QNwAfsNr) {
		this.QNwAfsNr = QNwAfsNr;
	}

	public Integer getQEntlNr() {
		return this.QEntlNr;
	}

	public void setQEntlNr(Integer QEntlNr) {
		this.QEntlNr = QEntlNr;
	}

	public Integer getQKkaNr() {
		return this.QKkaNr;
	}

	public void setQKkaNr(Integer QKkaNr) {
		this.QKkaNr = QKkaNr;
	}

	public AtlKlaeranlagen getQKaNr() {
		return this.QKaNr;
	}

	public void setQKaNr(AtlKlaeranlagen QKaNr) {
		this.QKaNr = QKaNr;
	}

	public Integer getZAbaNr() {
		return this.ZAbaNr;
	}

	public void setZAbaNr(Integer ZAbaNr) {
		this.ZAbaNr = ZAbaNr;
	}

	public ElkaEinleitungsstelle getZElsNr() {
		return this.ZElsNr;
	}

	public void setZElsNr(ElkaEinleitungsstelle ZElsNr) {
		this.ZElsNr = ZElsNr;
	}

	public Integer getZAfsNr() {
		return this.ZAfsNr;
	}

	public void setZAfsNr(Integer ZAfsNr) {
		this.ZAfsNr = ZAfsNr;
	}

	public Integer getZMsstNr() {
		return this.ZMsstNr;
	}

	public void setZMsstNr(Integer ZMsstNr) {
		this.ZMsstNr = ZMsstNr;
	}

	public Integer getZSbNr() {
		return this.ZSbNr;
	}

	public void setZSbNr(Integer ZSbNr) {
		this.ZSbNr = ZSbNr;
	}

	public Integer getZNwAfsNr() {
		return this.ZNwAfsNr;
	}

	public void setZNwAfsNr(Integer ZNwAfsNr) {
		this.ZNwAfsNr = ZNwAfsNr;
	}

	public Integer getZEntlNr() {
		return this.ZEntlNr;
	}

	public void setZEntlNr(Integer ZEntlNr) {
		this.ZEntlNr = ZEntlNr;
	}

	public Integer getZKkaNr() {
		return this.ZKkaNr;
	}

	public void setZKkaNr(Integer ZKkaNr) {
		this.ZKkaNr = ZKkaNr;
	}

	public AtlKlaeranlagen getZKaNr() {
		return this.ZKaNr;
	}

	public void setZKaNr(AtlKlaeranlagen ZKaNr) {
		this.ZKaNr = ZKaNr;
	}

	public Date getAktualDat() {
		return this.aktualDat;
	}

	public void setAktualDat(Date aktualDat) {
		this.aktualDat = aktualDat;
	}

	public Date getErstellDat() {
		return this.erstellDat;
	}

	public void setErstellDat(Date erstellDat) {
		this.erstellDat = erstellDat;
	}
	
	/**
	     * Get a string representation for the gui
	     * @return String
	     */
	    public String toGuiString() {
	        return getNr().toString();
	    }
	
	/**
	* @param other
	* @return <code>true</code>, if this and other are equal,
        *<code>false</code> otherwise
        */
	@Override
	public boolean equals(Object other) {
	    if (this == other) return true;
	    if (other == null) return false;
	    if (!(other instanceof ElkaReferenz)) return false;
	    return (this.getNr().equals(
            ((ElkaReferenz) other).getNr()));
	    }
	
	    /**
	     * Calculate a unique hashCode
	     * @return <code>int</code>
	     */
	    @Override
	    public int hashCode() {
	        int result = 17;
	        int idValue = this.getNr() == null ?
	            0 : this.getNr().hashCode();
	        result = result * 37 + idValue;
	        return result;
	    }
	
	    /**
	     * Merge (save or update) a detached instance
	     * @param detachedInstance the instance to merge
	     * @return <code>AtlKlaeranlagen</code> the merged instance,
	     *         if everything went okay,
	     *         <code>null</code> otherwise
	     */
	    public static ElkaReferenz merge(ElkaReferenz detachedInstance) {
	        log.debug("Merging ElkaReferenz instance " + detachedInstance);
	        return (ElkaReferenz) new DatabaseAccess().merge(detachedInstance);
	    }
	
	/**
	 * Merge (save or update) this instance
	 * @return <code>true</code>, if everything went okay,
	 *         <code>false</code> otherwise
	 */
	public boolean merge() {
	    ElkaReferenz saved = ElkaReferenz.merge(this);
	    if (saved == null) {
		return false;
	    } else {
		this.copy(saved);
	        return true;
	    	}
	    }
	
	
	/**
	 * Update this ElkaReferenz with its new values.<br>
	 * This is meant to be used after merging!
         * @param copy ElkaReferenz
	 */
	private void copy(ElkaReferenz copy) {
	    this.fsTog = copy.getFsTog();
	    this.aktualDat = copy.getAktualDat();
	    this.erstellDat = copy.getErstellDat();
	    this.QAbaNr = copy.getQAbaNr();
	    this.QAfsNr = copy.getQAfsNr();
	    this.QElsNr = copy.getQElsNr();
	    this.QEntlNr = copy.getQEntlNr();
	    this.QKaNr = copy.getQKaNr();
	    this.QKkaNr = copy.getQKkaNr();
	    this.QMsstNr = copy.getQMsstNr();
	    this.QNwAfsNr = copy.getQNwAfsNr();
	    this.QSbNr = copy.getQSbNr();
	    this.standortNr = copy.getStandortNr();
	    this.ZAbaNr = copy.getZAbaNr();
	    this.ZAfsNr = copy.getZAfsNr();
	    this.ZElsNr = copy.getZElsNr();
	    this.ZEntlNr = copy.getZEntlNr();
	    this.ZKaNr = copy.getZKaNr();
	    this.ZKkaNr = copy.getZKkaNr();
	    this.ZMsstNr = copy.getZMsstNr();
	    this.ZNwAfsNr = copy.getZNwAfsNr();
	    this.ZSbNr = copy.getZSbNr();	  
	    }    
	
	    /**
	     * Delete (mark as deleted) a detached instance
	     * @param detachedInstance the instance to delete
	     * @return <code>true</code>, if everything went okay,
	     *         <code>false</code> otherwise
	     */
	    public static boolean delete(ElkaReferenz detachedInstance) {
	        log.debug("Deleting ElkaReferenz instance " + detachedInstance);
	        return new DatabaseAccess().delete(detachedInstance);
	    }
	    
	    /**
	     * Delete (mark as deleted) this instance
	     * @return <code>true</code>, if everything went okay,
	     *         <code>false</code> otherwise
	     */
	    public boolean delete() {
	        return ElkaReferenz.delete(this);
	    }
	    
	    /**
	     * Find an <code>ElkaReferenz</code> instance by its primary key
	     * @param id the primary key value
	     * @return <code>ElkaReferenz</code> the requested instance,
	     *         if one exists,
	     *         <code>null</code> otherwise
	     */
	    public static ElkaReferenz findById(java.lang.Integer id) {
	        log.debug("Getting ElkaReferenz instance with id: " + id);
	        return (ElkaReferenz)
	            new DatabaseAccess().get(ElkaReferenz.class, id);
	    }
	    
	    /**
	     * Get a list of all <code>ElkaReferenz</code>
	     * @return <code>List&lt;ElkaReferenz&gt;</code>
	     *         all <code>ElkaReferenz</code>
	     */
	    public static List<ElkaReferenz> getAll() {
	        return DatabaseQuery.getAll(new ElkaReferenz());
	    }

}
