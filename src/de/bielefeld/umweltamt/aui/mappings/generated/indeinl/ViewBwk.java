/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.indeinl;

import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * A class that represents a row in the ViewBwk database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class ViewBwk  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private Integer objektid;
    private String betranrede;
    private String betrname;
    private String betrnamezus;
    private String strasse;
    private Integer hausnr;
    private String hausnrzus;
    private String branche;
    private String KHersteller;
    private String KTyp;
    private String KBrennmittel;
    private Integer KLeistung;
    private Calendar datumG;
    private Boolean aba;
    private String WBrenner;
    private String WWaermetauscher;
    private String WAbgasleitung;
    private String WKondensableitung;
    private String abnahme;
    private String bemerkungen;
    private Calendar anschreiben;
    private Integer erfassung;
    private Boolean genehmigung;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public ViewBwk() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public ViewBwk(
        Integer objektid) {
        this.objektid = objektid;
    }

    /** Full constructor */
    public ViewBwk(
        Integer objektid, String betranrede, String betrname, String betrnamezus, String strasse, Integer hausnr, String hausnrzus, String branche, String KHersteller, String KTyp, String KBrennmittel, Integer KLeistung, Calendar datumG, Boolean aba, String WBrenner, String WWaermetauscher, String WAbgasleitung, String WKondensableitung, String abnahme, String bemerkungen, Calendar anschreiben, Integer erfassung, Boolean genehmigung) {
        this.objektid = objektid;
        this.betranrede = betranrede;
        this.betrname = betrname;
        this.betrnamezus = betrnamezus;
        this.strasse = strasse;
        this.hausnr = hausnr;
        this.hausnrzus = hausnrzus;
        this.branche = branche;
        this.KHersteller = KHersteller;
        this.KTyp = KTyp;
        this.KBrennmittel = KBrennmittel;
        this.KLeistung = KLeistung;
        this.datumG = datumG;
        this.aba = aba;
        this.WBrenner = WBrenner;
        this.WWaermetauscher = WWaermetauscher;
        this.WAbgasleitung = WAbgasleitung;
        this.WKondensableitung = WKondensableitung;
        this.abnahme = abnahme;
        this.bemerkungen = bemerkungen;
        this.anschreiben = anschreiben;
        this.erfassung = erfassung;
        this.genehmigung = genehmigung;
    }

    /* Setter and getter methods */
    public Integer getObjektid() {
        return this.objektid;
    }

    public void setObjektid(Integer objektid) {
        this.objektid = objektid;
    }

    public String getBetranrede() {
        return this.betranrede;
    }

    public void setBetranrede(String betranrede) {
        this.betranrede = betranrede;
    }

    public String getBetrname() {
        return this.betrname;
    }

    public void setBetrname(String betrname) {
        this.betrname = betrname;
    }

    public String getBetrnamezus() {
        return this.betrnamezus;
    }

    public void setBetrnamezus(String betrnamezus) {
        this.betrnamezus = betrnamezus;
    }

    public String getStrasse() {
        return this.strasse;
    }

    public void setStrasse(String strasse) {
        this.strasse = strasse;
    }

    public Integer getHausnr() {
        return this.hausnr;
    }

    public void setHausnr(Integer hausnr) {
        this.hausnr = hausnr;
    }

    public String getHausnrzus() {
        return this.hausnrzus;
    }

    public void setHausnrzus(String hausnrzus) {
        this.hausnrzus = hausnrzus;
    }

    public String getBranche() {
        return this.branche;
    }

    public void setBranche(String branche) {
        this.branche = branche;
    }

    public String getKHersteller() {
        return this.KHersteller;
    }

    public void setKHersteller(String KHersteller) {
        this.KHersteller = KHersteller;
    }

    public String getKTyp() {
        return this.KTyp;
    }

    public void setKTyp(String KTyp) {
        this.KTyp = KTyp;
    }

    public String getKBrennmittel() {
        return this.KBrennmittel;
    }

    public void setKBrennmittel(String KBrennmittel) {
        this.KBrennmittel = KBrennmittel;
    }

    public Integer getKLeistung() {
        return this.KLeistung;
    }

    public void setKLeistung(Integer KLeistung) {
        this.KLeistung = KLeistung;
    }

    public Calendar getDatumG() {
        return this.datumG;
    }

    public void setDatumG(Calendar datumG) {
        this.datumG = datumG;
    }

    public Boolean getAba() {
        return this.aba;
    }

    public void setAba(Boolean aba) {
        this.aba = aba;
    }

    public String getWBrenner() {
        return this.WBrenner;
    }

    public void setWBrenner(String WBrenner) {
        this.WBrenner = WBrenner;
    }

    public String getWWaermetauscher() {
        return this.WWaermetauscher;
    }

    public void setWWaermetauscher(String WWaermetauscher) {
        this.WWaermetauscher = WWaermetauscher;
    }

    public String getWAbgasleitung() {
        return this.WAbgasleitung;
    }

    public void setWAbgasleitung(String WAbgasleitung) {
        this.WAbgasleitung = WAbgasleitung;
    }

    public String getWKondensableitung() {
        return this.WKondensableitung;
    }

    public void setWKondensableitung(String WKondensableitung) {
        this.WKondensableitung = WKondensableitung;
    }

    public String getAbnahme() {
        return this.abnahme;
    }

    public void setAbnahme(String abnahme) {
        this.abnahme = abnahme;
    }

    public String getBemerkungen() {
        return this.bemerkungen;
    }

    public void setBemerkungen(String bemerkungen) {
        this.bemerkungen = bemerkungen;
    }

    public Calendar getAnschreiben() {
        return this.anschreiben;
    }

    public void setAnschreiben(Calendar anschreiben) {
        this.anschreiben = anschreiben;
    }

    public Integer getErfassung() {
        return this.erfassung;
    }

    public void setErfassung(Integer erfassung) {
        this.erfassung = erfassung;
    }

    public Boolean getGenehmigung() {
        return this.genehmigung;
    }

    public void setGenehmigung(Boolean genehmigung) {
        this.genehmigung = genehmigung;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>ViewBwk</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static ViewBwk merge(ViewBwk detachedInstance) {
        log.debug("Merging ViewBwk instance " + detachedInstance);
        return (ViewBwk) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return ViewBwk.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(ViewBwk detachedInstance) {
        log.debug("Deleting ViewBwk instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return ViewBwk.delete(this);
    }

    /**
     * Find an <code>ViewBwk</code> instance by its primary key
     * @param id the primary key value
     * @return <code>ViewBwk</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static ViewBwk findById(java.lang.Integer id) {
        log.debug("Getting ViewBwk instance with id: " + id);
        return (ViewBwk)
            new DatabaseAccess().get(ViewBwk.class, id);
    }

    /**
     * Get a list of all <code>ViewBwk</code>
     * @return <code>List&lt;ViewBwk&gt;</code>
     *         all <code>ViewBwk</code>
     */
    public static List<ViewBwk> getAll() {
        log.debug("Getting all ViewBwk instances");
        String query = "FROM ViewBwk";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<ViewBwk> resultList = new ArrayList<ViewBwk>();
        ViewBwk result = null;
        for (Object object : objectList) {
            result = (ViewBwk) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
