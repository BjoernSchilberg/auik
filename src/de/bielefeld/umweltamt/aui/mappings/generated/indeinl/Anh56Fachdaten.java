/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.indeinl;

import de.bielefeld.umweltamt.aui.mappings.generated.basis.BasisObjekt;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * A class that represents a row in the Anh56Fachdaten database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class Anh56Fachdaten  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private int objektid;
    private BasisObjekt basisObjekt;
    private String druckverfahren;
    private String verbrauch;
    private String sachbearbeiterrav;
    private String sachbearbeiterheepen;
    private String entsorgung;
    private Boolean abwasseranfall;
    private Boolean genpflicht;
    private Boolean aba;
    private Calendar gen58;
    private Calendar gen59;
    private String bemerkungen;
    private Boolean abfallrechtlentsorg;
    private Boolean spuelwasser;
    private Boolean leimabwasser;
    private Calendar erfasstam;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public Anh56Fachdaten() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public Anh56Fachdaten(
        BasisObjekt basisObjekt, boolean enabled, boolean deleted) {
        this.basisObjekt = basisObjekt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public Anh56Fachdaten(
        BasisObjekt basisObjekt, String druckverfahren, String verbrauch, String sachbearbeiterrav, String sachbearbeiterheepen, String entsorgung, Boolean abwasseranfall, Boolean genpflicht, Boolean aba, Calendar gen58, Calendar gen59, String bemerkungen, Boolean abfallrechtlentsorg, Boolean spuelwasser, Boolean leimabwasser, Calendar erfasstam, boolean enabled, boolean deleted) {
        this.basisObjekt = basisObjekt;
        this.druckverfahren = druckverfahren;
        this.verbrauch = verbrauch;
        this.sachbearbeiterrav = sachbearbeiterrav;
        this.sachbearbeiterheepen = sachbearbeiterheepen;
        this.entsorgung = entsorgung;
        this.abwasseranfall = abwasseranfall;
        this.genpflicht = genpflicht;
        this.aba = aba;
        this.gen58 = gen58;
        this.gen59 = gen59;
        this.bemerkungen = bemerkungen;
        this.abfallrechtlentsorg = abfallrechtlentsorg;
        this.spuelwasser = spuelwasser;
        this.leimabwasser = leimabwasser;
        this.erfasstam = erfasstam;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public int getObjektid() {
        return this.objektid;
    }

    public void setObjektid(int objektid) {
        this.objektid = objektid;
    }

    public BasisObjekt getBasisObjekt() {
        return this.basisObjekt;
    }

    public void setBasisObjekt(BasisObjekt basisObjekt) {
        this.basisObjekt = basisObjekt;
    }

    public String getDruckverfahren() {
        return this.druckverfahren;
    }

    public void setDruckverfahren(String druckverfahren) {
        this.druckverfahren = druckverfahren;
    }

    public String getVerbrauch() {
        return this.verbrauch;
    }

    public void setVerbrauch(String verbrauch) {
        this.verbrauch = verbrauch;
    }

    public String getSachbearbeiterrav() {
        return this.sachbearbeiterrav;
    }

    public void setSachbearbeiterrav(String sachbearbeiterrav) {
        this.sachbearbeiterrav = sachbearbeiterrav;
    }

    public String getSachbearbeiterheepen() {
        return this.sachbearbeiterheepen;
    }

    public void setSachbearbeiterheepen(String sachbearbeiterheepen) {
        this.sachbearbeiterheepen = sachbearbeiterheepen;
    }

    public String getEntsorgung() {
        return this.entsorgung;
    }

    public void setEntsorgung(String entsorgung) {
        this.entsorgung = entsorgung;
    }

    public Boolean getAbwasseranfall() {
        return this.abwasseranfall;
    }

    public void setAbwasseranfall(Boolean abwasseranfall) {
        this.abwasseranfall = abwasseranfall;
    }

    public Boolean getGenpflicht() {
        return this.genpflicht;
    }

    public void setGenpflicht(Boolean genpflicht) {
        this.genpflicht = genpflicht;
    }

    public Boolean getAba() {
        return this.aba;
    }

    public void setAba(Boolean aba) {
        this.aba = aba;
    }

    public Calendar getGen58() {
        return this.gen58;
    }

    public void setGen58(Calendar gen58) {
        this.gen58 = gen58;
    }

    public Calendar getGen59() {
        return this.gen59;
    }

    public void setGen59(Calendar gen59) {
        this.gen59 = gen59;
    }

    public String getBemerkungen() {
        return this.bemerkungen;
    }

    public void setBemerkungen(String bemerkungen) {
        this.bemerkungen = bemerkungen;
    }

    public Boolean getAbfallrechtlentsorg() {
        return this.abfallrechtlentsorg;
    }

    public void setAbfallrechtlentsorg(Boolean abfallrechtlentsorg) {
        this.abfallrechtlentsorg = abfallrechtlentsorg;
    }

    public Boolean getSpuelwasser() {
        return this.spuelwasser;
    }

    public void setSpuelwasser(Boolean spuelwasser) {
        this.spuelwasser = spuelwasser;
    }

    public Boolean getLeimabwasser() {
        return this.leimabwasser;
    }

    public void setLeimabwasser(Boolean leimabwasser) {
        this.leimabwasser = leimabwasser;
    }

    public Calendar getErfasstam() {
        return this.erfasstam;
    }

    public void setErfasstam(Calendar erfasstam) {
        this.erfasstam = erfasstam;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>Anh56Fachdaten</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static Anh56Fachdaten merge(Anh56Fachdaten detachedInstance) {
        log.debug("Merging Anh56Fachdaten instance " + detachedInstance);
        return (Anh56Fachdaten) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return Anh56Fachdaten.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(Anh56Fachdaten detachedInstance) {
        log.debug("Deleting Anh56Fachdaten instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return Anh56Fachdaten.delete(this);
    }

    /**
     * Find an <code>Anh56Fachdaten</code> instance by its primary key
     * @param id the primary key value
     * @return <code>Anh56Fachdaten</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static Anh56Fachdaten findById(int id) {
        log.debug("Getting Anh56Fachdaten instance with id: " + id);
        return (Anh56Fachdaten)
            new DatabaseAccess().get(Anh56Fachdaten.class, id);
    }

    /**
     * Get a list of all <code>Anh56Fachdaten</code>
     * @return <code>List&lt;Anh56Fachdaten&gt;</code>
     *         all <code>Anh56Fachdaten</code>
     */
    public static List<Anh56Fachdaten> getAll() {
        log.debug("Getting all Anh56Fachdaten instances");
        String query = "FROM Anh56Fachdaten";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<Anh56Fachdaten> resultList = new ArrayList<Anh56Fachdaten>();
        Anh56Fachdaten result = null;
        for (Object object : objectList) {
            result = (Anh56Fachdaten) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
