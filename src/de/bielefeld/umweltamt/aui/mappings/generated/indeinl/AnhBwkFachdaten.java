/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.indeinl;

import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * A class that represents a row in the AnhBwkFachdaten database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class AnhBwkFachdaten  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private int objektid;
    private String branche;
    private String KHersteller;
    private String KTyp;
    private String KBrennmittel;
    private Integer KLeistung;
    private Calendar datumG;
    private Boolean aba;
    private String WBrenner;
    private String WWaermetauscher;
    private String WAbgasleitung;
    private String WKondensableitung;
    private String abnahme;
    private String bemerkungen;
    private Calendar anschreiben;
    private Integer erfassung;
    private Boolean genehmigung;
    private Boolean genehmigungspflicht;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public AnhBwkFachdaten() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public AnhBwkFachdaten(
        int objektid, boolean enabled, boolean deleted) {
        this.objektid = objektid;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public AnhBwkFachdaten(
        int objektid, String branche, String KHersteller, String KTyp, String KBrennmittel, Integer KLeistung, Calendar datumG, Boolean aba, String WBrenner, String WWaermetauscher, String WAbgasleitung, String WKondensableitung, String abnahme, String bemerkungen, Calendar anschreiben, Integer erfassung, Boolean genehmigung, Boolean genehmigungspflicht, boolean enabled, boolean deleted) {
        this.objektid = objektid;
        this.branche = branche;
        this.KHersteller = KHersteller;
        this.KTyp = KTyp;
        this.KBrennmittel = KBrennmittel;
        this.KLeistung = KLeistung;
        this.datumG = datumG;
        this.aba = aba;
        this.WBrenner = WBrenner;
        this.WWaermetauscher = WWaermetauscher;
        this.WAbgasleitung = WAbgasleitung;
        this.WKondensableitung = WKondensableitung;
        this.abnahme = abnahme;
        this.bemerkungen = bemerkungen;
        this.anschreiben = anschreiben;
        this.erfassung = erfassung;
        this.genehmigung = genehmigung;
        this.genehmigungspflicht = genehmigungspflicht;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public int getObjektid() {
        return this.objektid;
    }

    public void setObjektid(int objektid) {
        this.objektid = objektid;
    }

    public String getBranche() {
        return this.branche;
    }

    public void setBranche(String branche) {
        this.branche = branche;
    }

    public String getKHersteller() {
        return this.KHersteller;
    }

    public void setKHersteller(String KHersteller) {
        this.KHersteller = KHersteller;
    }

    public String getKTyp() {
        return this.KTyp;
    }

    public void setKTyp(String KTyp) {
        this.KTyp = KTyp;
    }

    public String getKBrennmittel() {
        return this.KBrennmittel;
    }

    public void setKBrennmittel(String KBrennmittel) {
        this.KBrennmittel = KBrennmittel;
    }

    public Integer getKLeistung() {
        return this.KLeistung;
    }

    public void setKLeistung(Integer KLeistung) {
        this.KLeistung = KLeistung;
    }

    public Calendar getDatumG() {
        return this.datumG;
    }

    public void setDatumG(Calendar datumG) {
        this.datumG = datumG;
    }

    public Boolean getAba() {
        return this.aba;
    }

    public void setAba(Boolean aba) {
        this.aba = aba;
    }

    public String getWBrenner() {
        return this.WBrenner;
    }

    public void setWBrenner(String WBrenner) {
        this.WBrenner = WBrenner;
    }

    public String getWWaermetauscher() {
        return this.WWaermetauscher;
    }

    public void setWWaermetauscher(String WWaermetauscher) {
        this.WWaermetauscher = WWaermetauscher;
    }

    public String getWAbgasleitung() {
        return this.WAbgasleitung;
    }

    public void setWAbgasleitung(String WAbgasleitung) {
        this.WAbgasleitung = WAbgasleitung;
    }

    public String getWKondensableitung() {
        return this.WKondensableitung;
    }

    public void setWKondensableitung(String WKondensableitung) {
        this.WKondensableitung = WKondensableitung;
    }

    public String getAbnahme() {
        return this.abnahme;
    }

    public void setAbnahme(String abnahme) {
        this.abnahme = abnahme;
    }

    public String getBemerkungen() {
        return this.bemerkungen;
    }

    public void setBemerkungen(String bemerkungen) {
        this.bemerkungen = bemerkungen;
    }

    public Calendar getAnschreiben() {
        return this.anschreiben;
    }

    public void setAnschreiben(Calendar anschreiben) {
        this.anschreiben = anschreiben;
    }

    public Integer getErfassung() {
        return this.erfassung;
    }

    public void setErfassung(Integer erfassung) {
        this.erfassung = erfassung;
    }

    public Boolean getGenehmigung() {
        return this.genehmigung;
    }

    public void setGenehmigung(Boolean genehmigung) {
        this.genehmigung = genehmigung;
    }

    public Boolean getGenehmigungspflicht() {
        return this.genehmigungspflicht;
    }

    public void setGenehmigungspflicht(Boolean genehmigungspflicht) {
        this.genehmigungspflicht = genehmigungspflicht;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>AnhBwkFachdaten</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static AnhBwkFachdaten merge(AnhBwkFachdaten detachedInstance) {
        log.debug("Merging AnhBwkFachdaten instance " + detachedInstance);
        return (AnhBwkFachdaten) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return AnhBwkFachdaten.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(AnhBwkFachdaten detachedInstance) {
        log.debug("Deleting AnhBwkFachdaten instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return AnhBwkFachdaten.delete(this);
    }

    /**
     * Find an <code>AnhBwkFachdaten</code> instance by its primary key
     * @param id the primary key value
     * @return <code>AnhBwkFachdaten</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static AnhBwkFachdaten findById(int id) {
        log.debug("Getting AnhBwkFachdaten instance with id: " + id);
        return (AnhBwkFachdaten)
            new DatabaseAccess().get(AnhBwkFachdaten.class, id);
    }

    /**
     * Get a list of all <code>AnhBwkFachdaten</code>
     * @return <code>List&lt;AnhBwkFachdaten&gt;</code>
     *         all <code>AnhBwkFachdaten</code>
     */
    public static List<AnhBwkFachdaten> getAll() {
        log.debug("Getting all AnhBwkFachdaten instances");
        String query = "FROM AnhBwkFachdaten";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<AnhBwkFachdaten> resultList = new ArrayList<AnhBwkFachdaten>();
        AnhBwkFachdaten result = null;
        for (Object object : objectList) {
            result = (AnhBwkFachdaten) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
