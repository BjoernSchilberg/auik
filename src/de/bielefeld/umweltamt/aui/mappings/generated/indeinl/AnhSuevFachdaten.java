/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.indeinl;

import de.bielefeld.umweltamt.aui.mappings.generated.basis.BasisObjekt;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * A class that represents a row in the AnhSuevFachdaten database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class AnhSuevFachdaten  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private int objektid;
    private BasisObjekt basisObjekt;
    private Boolean groesser3ha;
    private Integer versFlaeche;
    private Boolean suevkanPflicht;
    private Boolean indirektsw;
    private Boolean indirektrw;
    private Boolean direktsw;
    private Boolean direktrw;
    private Integer anzeige58;
    private Boolean sanierungErfolgt;
    private Boolean sanierungskonzept;
    private Boolean keineAngaben;
    private Calendar datAnzeige58;
    private Calendar datAnschreiben;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public AnhSuevFachdaten() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public AnhSuevFachdaten(
        BasisObjekt basisObjekt, boolean enabled, boolean deleted) {
        this.basisObjekt = basisObjekt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public AnhSuevFachdaten(
        BasisObjekt basisObjekt, Boolean groesser3ha, Integer versFlaeche, Boolean suevkanPflicht, Boolean indirektsw, Boolean indirektrw, Boolean direktsw, Boolean direktrw, Integer anzeige58, Boolean sanierungErfolgt, Boolean sanierungskonzept, Boolean keineAngaben, Calendar datAnzeige58, Calendar datAnschreiben, boolean enabled, boolean deleted) {
        this.basisObjekt = basisObjekt;
        this.groesser3ha = groesser3ha;
        this.versFlaeche = versFlaeche;
        this.suevkanPflicht = suevkanPflicht;
        this.indirektsw = indirektsw;
        this.indirektrw = indirektrw;
        this.direktsw = direktsw;
        this.direktrw = direktrw;
        this.anzeige58 = anzeige58;
        this.sanierungErfolgt = sanierungErfolgt;
        this.sanierungskonzept = sanierungskonzept;
        this.keineAngaben = keineAngaben;
        this.datAnzeige58 = datAnzeige58;
        this.datAnschreiben = datAnschreiben;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public int getObjektid() {
        return this.objektid;
    }

    public void setObjektid(int objektid) {
        this.objektid = objektid;
    }

    public BasisObjekt getBasisObjekt() {
        return this.basisObjekt;
    }

    public void setBasisObjekt(BasisObjekt basisObjekt) {
        this.basisObjekt = basisObjekt;
    }

    public Boolean getGroesser3ha() {
        return this.groesser3ha;
    }

    public void setGroesser3ha(Boolean groesser3ha) {
        this.groesser3ha = groesser3ha;
    }

    public Integer getVersFlaeche() {
        return this.versFlaeche;
    }

    public void setVersFlaeche(Integer versFlaeche) {
        this.versFlaeche = versFlaeche;
    }

    public Boolean getSuevkanPflicht() {
        return this.suevkanPflicht;
    }

    public void setSuevkanPflicht(Boolean suevkanPflicht) {
        this.suevkanPflicht = suevkanPflicht;
    }

    public Boolean getIndirektsw() {
        return this.indirektsw;
    }

    public void setIndirektsw(Boolean indirektsw) {
        this.indirektsw = indirektsw;
    }

    public Boolean getIndirektrw() {
        return this.indirektrw;
    }

    public void setIndirektrw(Boolean indirektrw) {
        this.indirektrw = indirektrw;
    }

    public Boolean getDirektsw() {
        return this.direktsw;
    }

    public void setDirektsw(Boolean direktsw) {
        this.direktsw = direktsw;
    }

    public Boolean getDirektrw() {
        return this.direktrw;
    }

    public void setDirektrw(Boolean direktrw) {
        this.direktrw = direktrw;
    }

    public Integer getAnzeige58() {
        return this.anzeige58;
    }

    public void setAnzeige58(Integer anzeige58) {
        this.anzeige58 = anzeige58;
    }

    public Boolean getSanierungErfolgt() {
        return this.sanierungErfolgt;
    }

    public void setSanierungErfolgt(Boolean sanierungErfolgt) {
        this.sanierungErfolgt = sanierungErfolgt;
    }

    public Boolean getSanierungskonzept() {
        return this.sanierungskonzept;
    }

    public void setSanierungskonzept(Boolean sanierungskonzept) {
        this.sanierungskonzept = sanierungskonzept;
    }

    public Boolean getKeineAngaben() {
        return this.keineAngaben;
    }

    public void setKeineAngaben(Boolean keineAngaben) {
        this.keineAngaben = keineAngaben;
    }

    public Calendar getDatAnzeige58() {
        return this.datAnzeige58;
    }

    public void setDatAnzeige58(Calendar datAnzeige58) {
        this.datAnzeige58 = datAnzeige58;
    }

    public Calendar getDatAnschreiben() {
        return this.datAnschreiben;
    }

    public void setDatAnschreiben(Calendar datAnschreiben) {
        this.datAnschreiben = datAnschreiben;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>AnhSuevFachdaten</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static AnhSuevFachdaten merge(AnhSuevFachdaten detachedInstance) {
        log.debug("Merging AnhSuevFachdaten instance " + detachedInstance);
        return (AnhSuevFachdaten) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return AnhSuevFachdaten.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(AnhSuevFachdaten detachedInstance) {
        log.debug("Deleting AnhSuevFachdaten instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return AnhSuevFachdaten.delete(this);
    }

    /**
     * Find an <code>AnhSuevFachdaten</code> instance by its primary key
     * @param id the primary key value
     * @return <code>AnhSuevFachdaten</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static AnhSuevFachdaten findById(int id) {
        log.debug("Getting AnhSuevFachdaten instance with id: " + id);
        return (AnhSuevFachdaten)
            new DatabaseAccess().get(AnhSuevFachdaten.class, id);
    }

    /**
     * Get a list of all <code>AnhSuevFachdaten</code>
     * @return <code>List&lt;AnhSuevFachdaten&gt;</code>
     *         all <code>AnhSuevFachdaten</code>
     */
    public static List<AnhSuevFachdaten> getAll() {
        log.debug("Getting all AnhSuevFachdaten instances");
        String query = "FROM AnhSuevFachdaten";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<AnhSuevFachdaten> resultList = new ArrayList<AnhSuevFachdaten>();
        AnhSuevFachdaten result = null;
        for (Object object : objectList) {
            result = (AnhSuevFachdaten) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
