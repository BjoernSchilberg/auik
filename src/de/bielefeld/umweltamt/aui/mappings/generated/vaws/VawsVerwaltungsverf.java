/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.vaws;

import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * A class that represents a row in the VawsVerwaltungsverf database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class VawsVerwaltungsverf  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private VawsFachdaten vawsFachdaten;
    private Calendar datum;
    private String massnahme;
    private Calendar wiedervorlage;
    private Boolean wvverwverf;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public VawsVerwaltungsverf() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public VawsVerwaltungsverf(
        boolean enabled, boolean deleted) {
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public VawsVerwaltungsverf(
        VawsFachdaten vawsFachdaten, Calendar datum, String massnahme, Calendar wiedervorlage, Boolean wvverwverf, boolean enabled, boolean deleted) {
        this.vawsFachdaten = vawsFachdaten;
        this.datum = datum;
        this.massnahme = massnahme;
        this.wiedervorlage = wiedervorlage;
        this.wvverwverf = wvverwverf;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public VawsFachdaten getVawsFachdaten() {
        return this.vawsFachdaten;
    }

    public void setVawsFachdaten(VawsFachdaten vawsFachdaten) {
        this.vawsFachdaten = vawsFachdaten;
    }

    public Calendar getDatum() {
        return this.datum;
    }

    public void setDatum(Calendar datum) {
        this.datum = datum;
    }

    public String getMassnahme() {
        return this.massnahme;
    }

    public void setMassnahme(String massnahme) {
        this.massnahme = massnahme;
    }

    public Calendar getWiedervorlage() {
        return this.wiedervorlage;
    }

    public void setWiedervorlage(Calendar wiedervorlage) {
        this.wiedervorlage = wiedervorlage;
    }

    public Boolean getWvverwverf() {
        return this.wvverwverf;
    }

    public void setWvverwverf(Boolean wvverwverf) {
        this.wvverwverf = wvverwverf;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>VawsVerwaltungsverf</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static VawsVerwaltungsverf merge(VawsVerwaltungsverf detachedInstance) {
        log.debug("Merging VawsVerwaltungsverf instance " + detachedInstance);
        return (VawsVerwaltungsverf) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return VawsVerwaltungsverf.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(VawsVerwaltungsverf detachedInstance) {
        log.debug("Deleting VawsVerwaltungsverf instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return VawsVerwaltungsverf.delete(this);
    }

    /**
     * Find an <code>VawsVerwaltungsverf</code> instance by its primary key
     * @param id the primary key value
     * @return <code>VawsVerwaltungsverf</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static VawsVerwaltungsverf findById(java.lang.Integer id) {
        log.debug("Getting VawsVerwaltungsverf instance with id: " + id);
        return (VawsVerwaltungsverf)
            new DatabaseAccess().get(VawsVerwaltungsverf.class, id);
    }

    /**
     * Get a list of all <code>VawsVerwaltungsverf</code>
     * @return <code>List&lt;VawsVerwaltungsverf&gt;</code>
     *         all <code>VawsVerwaltungsverf</code>
     */
    public static List<VawsVerwaltungsverf> getAll() {
        log.debug("Getting all VawsVerwaltungsverf instances");
        String query = "FROM VawsVerwaltungsverf";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<VawsVerwaltungsverf> resultList = new ArrayList<VawsVerwaltungsverf>();
        VawsVerwaltungsverf result = null;
        for (Object object : objectList) {
            result = (VawsVerwaltungsverf) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
