/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.vaws;

import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A class that represents a row in the VawsGebuehrenarten database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class VawsGebuehrenarten  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private int id;
    private String gebuehrenart;
    private boolean enabled;
    private boolean deleted;
    private Set<VawsVerwaltungsgebuehren> vawsVerwaltungsgebuehrens = new HashSet<VawsVerwaltungsgebuehren>(0);

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public VawsGebuehrenarten() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public VawsGebuehrenarten(
        int id, boolean enabled, boolean deleted) {
        this.id = id;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public VawsGebuehrenarten(
        int id, String gebuehrenart, boolean enabled, boolean deleted, Set<VawsVerwaltungsgebuehren> vawsVerwaltungsgebuehrens) {
        this.id = id;
        this.gebuehrenart = gebuehrenart;
        this.enabled = enabled;
        this.deleted = deleted;
        this.vawsVerwaltungsgebuehrens = vawsVerwaltungsgebuehrens;
    }

    /* Setter and getter methods */
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getGebuehrenart() {
        return this.gebuehrenart;
    }

    public void setGebuehrenart(String gebuehrenart) {
        this.gebuehrenart = gebuehrenart;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Set<VawsVerwaltungsgebuehren> getVawsVerwaltungsgebuehrens() {
        return this.vawsVerwaltungsgebuehrens;
    }

    public void setVawsVerwaltungsgebuehrens(Set<VawsVerwaltungsgebuehren> vawsVerwaltungsgebuehrens) {
        this.vawsVerwaltungsgebuehrens = vawsVerwaltungsgebuehrens;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>VawsGebuehrenarten</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static VawsGebuehrenarten merge(VawsGebuehrenarten detachedInstance) {
        log.debug("Merging VawsGebuehrenarten instance " + detachedInstance);
        return (VawsGebuehrenarten) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return VawsGebuehrenarten.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(VawsGebuehrenarten detachedInstance) {
        log.debug("Deleting VawsGebuehrenarten instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return VawsGebuehrenarten.delete(this);
    }

    /**
     * Find an <code>VawsGebuehrenarten</code> instance by its primary key
     * @param id the primary key value
     * @return <code>VawsGebuehrenarten</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static VawsGebuehrenarten findById(int id) {
        log.debug("Getting VawsGebuehrenarten instance with id: " + id);
        return (VawsGebuehrenarten)
            new DatabaseAccess().get(VawsGebuehrenarten.class, id);
    }

    /**
     * Get a list of all <code>VawsGebuehrenarten</code>
     * @return <code>List&lt;VawsGebuehrenarten&gt;</code>
     *         all <code>VawsGebuehrenarten</code>
     */
    public static List<VawsGebuehrenarten> getAll() {
        log.debug("Getting all VawsGebuehrenarten instances");
        String query = "FROM VawsGebuehrenarten";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<VawsGebuehrenarten> resultList = new ArrayList<VawsGebuehrenarten>();
        VawsGebuehrenarten result = null;
        for (Object object : objectList) {
            result = (VawsGebuehrenarten) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
