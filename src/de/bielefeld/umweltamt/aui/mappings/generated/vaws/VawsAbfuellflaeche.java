/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.vaws;

import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.List;

/**
 * A class that represents a row in the VawsAbfuellflaeche database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class VawsAbfuellflaeche  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private int behaelterid;
    private Boolean eoh;
    private Boolean ef;
    private Boolean abfsaniert;
    private Boolean abfneuerstellt;
    private String bodenflaechenausf;
    private String beschbodenfl;
    private Float dicke;
    private String guete;
    private String fugenmaterial;
    private String beschfugenmat;
    private String niederschlagschutz;
    private Boolean abscheidervorh;
    private String beschableitung;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public VawsAbfuellflaeche() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public VawsAbfuellflaeche(
        int behaelterid, boolean enabled, boolean deleted) {
        this.behaelterid = behaelterid;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public VawsAbfuellflaeche(
        int behaelterid, Boolean eoh, Boolean ef, Boolean abfsaniert, Boolean abfneuerstellt, String bodenflaechenausf, String beschbodenfl, Float dicke, String guete, String fugenmaterial, String beschfugenmat, String niederschlagschutz, Boolean abscheidervorh, String beschableitung, boolean enabled, boolean deleted) {
        this.behaelterid = behaelterid;
        this.eoh = eoh;
        this.ef = ef;
        this.abfsaniert = abfsaniert;
        this.abfneuerstellt = abfneuerstellt;
        this.bodenflaechenausf = bodenflaechenausf;
        this.beschbodenfl = beschbodenfl;
        this.dicke = dicke;
        this.guete = guete;
        this.fugenmaterial = fugenmaterial;
        this.beschfugenmat = beschfugenmat;
        this.niederschlagschutz = niederschlagschutz;
        this.abscheidervorh = abscheidervorh;
        this.beschableitung = beschableitung;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public int getBehaelterid() {
        return this.behaelterid;
    }

    public void setBehaelterid(int behaelterid) {
        this.behaelterid = behaelterid;
    }

    public Boolean getEoh() {
        return this.eoh;
    }

    public void setEoh(Boolean eoh) {
        this.eoh = eoh;
    }

    public Boolean getEf() {
        return this.ef;
    }

    public void setEf(Boolean ef) {
        this.ef = ef;
    }

    public Boolean getAbfsaniert() {
        return this.abfsaniert;
    }

    public void setAbfsaniert(Boolean abfsaniert) {
        this.abfsaniert = abfsaniert;
    }

    public Boolean getAbfneuerstellt() {
        return this.abfneuerstellt;
    }

    public void setAbfneuerstellt(Boolean abfneuerstellt) {
        this.abfneuerstellt = abfneuerstellt;
    }

    public String getBodenflaechenausf() {
        return this.bodenflaechenausf;
    }

    public void setBodenflaechenausf(String bodenflaechenausf) {
        this.bodenflaechenausf = bodenflaechenausf;
    }

    public String getBeschbodenfl() {
        return this.beschbodenfl;
    }

    public void setBeschbodenfl(String beschbodenfl) {
        this.beschbodenfl = beschbodenfl;
    }

    public Float getDicke() {
        return this.dicke;
    }

    public void setDicke(Float dicke) {
        this.dicke = dicke;
    }

    public String getGuete() {
        return this.guete;
    }

    public void setGuete(String guete) {
        this.guete = guete;
    }

    public String getFugenmaterial() {
        return this.fugenmaterial;
    }

    public void setFugenmaterial(String fugenmaterial) {
        this.fugenmaterial = fugenmaterial;
    }

    public String getBeschfugenmat() {
        return this.beschfugenmat;
    }

    public void setBeschfugenmat(String beschfugenmat) {
        this.beschfugenmat = beschfugenmat;
    }

    public String getNiederschlagschutz() {
        return this.niederschlagschutz;
    }

    public void setNiederschlagschutz(String niederschlagschutz) {
        this.niederschlagschutz = niederschlagschutz;
    }

    public Boolean getAbscheidervorh() {
        return this.abscheidervorh;
    }

    public void setAbscheidervorh(Boolean abscheidervorh) {
        this.abscheidervorh = abscheidervorh;
    }

    public String getBeschableitung() {
        return this.beschableitung;
    }

    public void setBeschableitung(String beschableitung) {
        this.beschableitung = beschableitung;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>VawsAbfuellflaeche</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static VawsAbfuellflaeche merge(VawsAbfuellflaeche detachedInstance) {
        log.debug("Merging VawsAbfuellflaeche instance " + detachedInstance);
        return (VawsAbfuellflaeche) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return VawsAbfuellflaeche.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(VawsAbfuellflaeche detachedInstance) {
        log.debug("Deleting VawsAbfuellflaeche instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return VawsAbfuellflaeche.delete(this);
    }

    /**
     * Find an <code>VawsAbfuellflaeche</code> instance by its primary key
     * @param id the primary key value
     * @return <code>VawsAbfuellflaeche</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static VawsAbfuellflaeche findById(int id) {
        log.debug("Getting VawsAbfuellflaeche instance with id: " + id);
        return (VawsAbfuellflaeche)
            new DatabaseAccess().get(VawsAbfuellflaeche.class, id);
    }

    /**
     * Get a list of all <code>VawsAbfuellflaeche</code>
     * @return <code>List&lt;VawsAbfuellflaeche&gt;</code>
     *         all <code>VawsAbfuellflaeche</code>
     */
    public static List<VawsAbfuellflaeche> getAll() {
        log.debug("Getting all VawsAbfuellflaeche instances");
        String query = "FROM VawsAbfuellflaeche";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<VawsAbfuellflaeche> resultList = new ArrayList<VawsAbfuellflaeche>();
        VawsAbfuellflaeche result = null;
        for (Object object : objectList) {
            result = (VawsAbfuellflaeche) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
