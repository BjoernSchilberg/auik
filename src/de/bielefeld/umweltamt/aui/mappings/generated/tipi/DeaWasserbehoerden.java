/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.tipi;

import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * A class that represents a row in the DeaWasserbehoerden database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class DeaWasserbehoerden  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private DeaWasserbehoerdenId id;
    private Calendar inkaGueltigVon;
    private Calendar inkaGueltigBis;
    private short istAktuellTog;
    private Calendar erfassungsDatum;
    private Calendar aenderungsDatum;
    private String name;
    private Integer behoerdenTypOpt;
    private int zustandsNr;
    private Calendar gueltigVon;
    private Calendar igStichtag;
    private Calendar gueltigBis;
    private Calendar erstellDat;
    private Calendar aktualDat;
    private int versionsnr;
    private Calendar zeitstempel;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public DeaWasserbehoerden() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public DeaWasserbehoerden(
        DeaWasserbehoerdenId id, Calendar inkaGueltigVon, short istAktuellTog, Calendar erfassungsDatum, int zustandsNr, Calendar gueltigVon, Calendar erstellDat, Calendar aktualDat, int versionsnr) {
        this.id = id;
        this.inkaGueltigVon = inkaGueltigVon;
        this.istAktuellTog = istAktuellTog;
        this.erfassungsDatum = erfassungsDatum;
        this.zustandsNr = zustandsNr;
        this.gueltigVon = gueltigVon;
        this.erstellDat = erstellDat;
        this.aktualDat = aktualDat;
        this.versionsnr = versionsnr;
    }

    /** Full constructor */
    public DeaWasserbehoerden(
        DeaWasserbehoerdenId id, Calendar inkaGueltigVon, Calendar inkaGueltigBis, short istAktuellTog, Calendar erfassungsDatum, Calendar aenderungsDatum, String name, Integer behoerdenTypOpt, int zustandsNr, Calendar gueltigVon, Calendar igStichtag, Calendar gueltigBis, Calendar erstellDat, Calendar aktualDat, int versionsnr, Calendar zeitstempel) {
        this.id = id;
        this.inkaGueltigVon = inkaGueltigVon;
        this.inkaGueltigBis = inkaGueltigBis;
        this.istAktuellTog = istAktuellTog;
        this.erfassungsDatum = erfassungsDatum;
        this.aenderungsDatum = aenderungsDatum;
        this.name = name;
        this.behoerdenTypOpt = behoerdenTypOpt;
        this.zustandsNr = zustandsNr;
        this.gueltigVon = gueltigVon;
        this.igStichtag = igStichtag;
        this.gueltigBis = gueltigBis;
        this.erstellDat = erstellDat;
        this.aktualDat = aktualDat;
        this.versionsnr = versionsnr;
        this.zeitstempel = zeitstempel;
    }

    /* Setter and getter methods */
    public DeaWasserbehoerdenId getId() {
        return this.id;
    }

    public void setId(DeaWasserbehoerdenId id) {
        this.id = id;
    }

    public Calendar getInkaGueltigVon() {
        return this.inkaGueltigVon;
    }

    public void setInkaGueltigVon(Calendar inkaGueltigVon) {
        this.inkaGueltigVon = inkaGueltigVon;
    }

    public Calendar getInkaGueltigBis() {
        return this.inkaGueltigBis;
    }

    public void setInkaGueltigBis(Calendar inkaGueltigBis) {
        this.inkaGueltigBis = inkaGueltigBis;
    }

    public short getIstAktuellTog() {
        return this.istAktuellTog;
    }

    public void setIstAktuellTog(short istAktuellTog) {
        this.istAktuellTog = istAktuellTog;
    }

    public Calendar getErfassungsDatum() {
        return this.erfassungsDatum;
    }

    public void setErfassungsDatum(Calendar erfassungsDatum) {
        this.erfassungsDatum = erfassungsDatum;
    }

    public Calendar getAenderungsDatum() {
        return this.aenderungsDatum;
    }

    public void setAenderungsDatum(Calendar aenderungsDatum) {
        this.aenderungsDatum = aenderungsDatum;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getBehoerdenTypOpt() {
        return this.behoerdenTypOpt;
    }

    public void setBehoerdenTypOpt(Integer behoerdenTypOpt) {
        this.behoerdenTypOpt = behoerdenTypOpt;
    }

    public int getZustandsNr() {
        return this.zustandsNr;
    }

    public void setZustandsNr(int zustandsNr) {
        this.zustandsNr = zustandsNr;
    }

    public Calendar getGueltigVon() {
        return this.gueltigVon;
    }

    public void setGueltigVon(Calendar gueltigVon) {
        this.gueltigVon = gueltigVon;
    }

    public Calendar getIgStichtag() {
        return this.igStichtag;
    }

    public void setIgStichtag(Calendar igStichtag) {
        this.igStichtag = igStichtag;
    }

    public Calendar getGueltigBis() {
        return this.gueltigBis;
    }

    public void setGueltigBis(Calendar gueltigBis) {
        this.gueltigBis = gueltigBis;
    }

    public Calendar getErstellDat() {
        return this.erstellDat;
    }

    public void setErstellDat(Calendar erstellDat) {
        this.erstellDat = erstellDat;
    }

    public Calendar getAktualDat() {
        return this.aktualDat;
    }

    public void setAktualDat(Calendar aktualDat) {
        this.aktualDat = aktualDat;
    }

    public int getVersionsnr() {
        return this.versionsnr;
    }

    public void setVersionsnr(int versionsnr) {
        this.versionsnr = versionsnr;
    }

    public Calendar getZeitstempel() {
        return this.zeitstempel;
    }

    public void setZeitstempel(Calendar zeitstempel) {
        this.zeitstempel = zeitstempel;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>DeaWasserbehoerden</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static DeaWasserbehoerden merge(DeaWasserbehoerden detachedInstance) {
        log.debug("Merging DeaWasserbehoerden instance " + detachedInstance);
        return (DeaWasserbehoerden) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return DeaWasserbehoerden.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(DeaWasserbehoerden detachedInstance) {
        log.debug("Deleting DeaWasserbehoerden instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return DeaWasserbehoerden.delete(this);
    }

    /**
     * Find an <code>DeaWasserbehoerden</code> instance by its primary key
     * @param id the primary key value
     * @return <code>DeaWasserbehoerden</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static DeaWasserbehoerden findById(de.bielefeld.umweltamt.aui.mappings.generated.tipi.DeaWasserbehoerdenId id) {
        log.debug("Getting DeaWasserbehoerden instance with id: " + id);
        return (DeaWasserbehoerden)
            new DatabaseAccess().get(DeaWasserbehoerden.class, id);
    }

    /**
     * Get a list of all <code>DeaWasserbehoerden</code>
     * @return <code>List&lt;DeaWasserbehoerden&gt;</code>
     *         all <code>DeaWasserbehoerden</code>
     */
    public static List<DeaWasserbehoerden> getAll() {
        log.debug("Getting all DeaWasserbehoerden instances");
        String query = "FROM DeaWasserbehoerden";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<DeaWasserbehoerden> resultList = new ArrayList<DeaWasserbehoerden>();
        DeaWasserbehoerden result = null;
        for (Object object : objectList) {
            result = (DeaWasserbehoerden) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
