/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.basis;

import de.bielefeld.umweltamt.aui.mappings.generated.atl.AtlProbenahmen;
import de.bielefeld.umweltamt.aui.mappings.generated.atl.AtlProbepkt;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A class that represents a row in the BasisSachbearbeiter database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class BasisSachbearbeiter  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private String kennummer;
    private String name;
    private String zeichen;
    private String zimmer;
    private String telefon;
    private String email;
    private String gehoertzuarbeitsgr;
    private boolean enabled;
    private boolean deleted;
    private Set<AtlProbepkt> atlProbepkts = new HashSet<AtlProbepkt>(0);
    private Set<BasisObjekt> basisObjekts = new HashSet<BasisObjekt>(0);
    private Set<AtlProbenahmen> atlProbenahmens = new HashSet<AtlProbenahmen>(0);

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public BasisSachbearbeiter() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public BasisSachbearbeiter(
        String kennummer, boolean enabled, boolean deleted) {
        this.kennummer = kennummer;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public BasisSachbearbeiter(
        String kennummer, String name, String zeichen, String zimmer, String telefon, String email, String gehoertzuarbeitsgr, boolean enabled, boolean deleted, Set<AtlProbepkt> atlProbepkts, Set<BasisObjekt> basisObjekts, Set<AtlProbenahmen> atlProbenahmens) {
        this.kennummer = kennummer;
        this.name = name;
        this.zeichen = zeichen;
        this.zimmer = zimmer;
        this.telefon = telefon;
        this.email = email;
        this.gehoertzuarbeitsgr = gehoertzuarbeitsgr;
        this.enabled = enabled;
        this.deleted = deleted;
        this.atlProbepkts = atlProbepkts;
        this.basisObjekts = basisObjekts;
        this.atlProbenahmens = atlProbenahmens;
    }

    /* Setter and getter methods */
    public String getKennummer() {
        return this.kennummer;
    }

    public void setKennummer(String kennummer) {
        this.kennummer = kennummer;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getZeichen() {
        return this.zeichen;
    }

    public void setZeichen(String zeichen) {
        this.zeichen = zeichen;
    }

    public String getZimmer() {
        return this.zimmer;
    }

    public void setZimmer(String zimmer) {
        this.zimmer = zimmer;
    }

    public String getTelefon() {
        return this.telefon;
    }

    public void setTelefon(String telefon) {
        this.telefon = telefon;
    }

    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getGehoertzuarbeitsgr() {
        return this.gehoertzuarbeitsgr;
    }

    public void setGehoertzuarbeitsgr(String gehoertzuarbeitsgr) {
        this.gehoertzuarbeitsgr = gehoertzuarbeitsgr;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Set<AtlProbepkt> getAtlProbepkts() {
        return this.atlProbepkts;
    }

    public void setAtlProbepkts(Set<AtlProbepkt> atlProbepkts) {
        this.atlProbepkts = atlProbepkts;
    }

    public Set<BasisObjekt> getBasisObjekts() {
        return this.basisObjekts;
    }

    public void setBasisObjekts(Set<BasisObjekt> basisObjekts) {
        this.basisObjekts = basisObjekts;
    }

    public Set<AtlProbenahmen> getAtlProbenahmens() {
        return this.atlProbenahmens;
    }

    public void setAtlProbenahmens(Set<AtlProbenahmen> atlProbenahmens) {
        this.atlProbenahmens = atlProbenahmens;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>BasisSachbearbeiter</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static BasisSachbearbeiter merge(BasisSachbearbeiter detachedInstance) {
        log.debug("Merging BasisSachbearbeiter instance " + detachedInstance);
        return (BasisSachbearbeiter) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return BasisSachbearbeiter.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(BasisSachbearbeiter detachedInstance) {
        log.debug("Deleting BasisSachbearbeiter instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return BasisSachbearbeiter.delete(this);
    }

    /**
     * Find an <code>BasisSachbearbeiter</code> instance by its primary key
     * @param id the primary key value
     * @return <code>BasisSachbearbeiter</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static BasisSachbearbeiter findById(java.lang.String id) {
        log.debug("Getting BasisSachbearbeiter instance with id: " + id);
        return (BasisSachbearbeiter)
            new DatabaseAccess().get(BasisSachbearbeiter.class, id);
    }

    /**
     * Get a list of all <code>BasisSachbearbeiter</code>
     * @return <code>List&lt;BasisSachbearbeiter&gt;</code>
     *         all <code>BasisSachbearbeiter</code>
     */
    public static List<BasisSachbearbeiter> getAll() {
        log.debug("Getting all BasisSachbearbeiter instances");
        String query = "FROM BasisSachbearbeiter";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<BasisSachbearbeiter> resultList = new ArrayList<BasisSachbearbeiter>();
        BasisSachbearbeiter result = null;
        for (Object object : objectList) {
            result = (BasisSachbearbeiter) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
