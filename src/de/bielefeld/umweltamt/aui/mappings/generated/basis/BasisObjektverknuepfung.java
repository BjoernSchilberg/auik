/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.basis;

import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.List;

/**
 * A class that represents a row in the BasisObjektverknuepfung database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class BasisObjektverknuepfung  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private BasisObjekt basisObjektByIstVerknuepftMit;
    private BasisObjekt basisObjektByObjekt;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public BasisObjektverknuepfung() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public BasisObjektverknuepfung(
        boolean enabled, boolean deleted) {
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public BasisObjektverknuepfung(
        BasisObjekt basisObjektByIstVerknuepftMit, BasisObjekt basisObjektByObjekt, boolean enabled, boolean deleted) {
        this.basisObjektByIstVerknuepftMit = basisObjektByIstVerknuepftMit;
        this.basisObjektByObjekt = basisObjektByObjekt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public BasisObjekt getBasisObjektByIstVerknuepftMit() {
        return this.basisObjektByIstVerknuepftMit;
    }

    public void setBasisObjektByIstVerknuepftMit(BasisObjekt basisObjektByIstVerknuepftMit) {
        this.basisObjektByIstVerknuepftMit = basisObjektByIstVerknuepftMit;
    }

    public BasisObjekt getBasisObjektByObjekt() {
        return this.basisObjektByObjekt;
    }

    public void setBasisObjektByObjekt(BasisObjekt basisObjektByObjekt) {
        this.basisObjektByObjekt = basisObjektByObjekt;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>BasisObjektverknuepfung</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static BasisObjektverknuepfung merge(BasisObjektverknuepfung detachedInstance) {
        log.debug("Merging BasisObjektverknuepfung instance " + detachedInstance);
        return (BasisObjektverknuepfung) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return BasisObjektverknuepfung.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(BasisObjektverknuepfung detachedInstance) {
        log.debug("Deleting BasisObjektverknuepfung instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return BasisObjektverknuepfung.delete(this);
    }

    /**
     * Find an <code>BasisObjektverknuepfung</code> instance by its primary key
     * @param id the primary key value
     * @return <code>BasisObjektverknuepfung</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static BasisObjektverknuepfung findById(java.lang.Integer id) {
        log.debug("Getting BasisObjektverknuepfung instance with id: " + id);
        return (BasisObjektverknuepfung)
            new DatabaseAccess().get(BasisObjektverknuepfung.class, id);
    }

    /**
     * Get a list of all <code>BasisObjektverknuepfung</code>
     * @return <code>List&lt;BasisObjektverknuepfung&gt;</code>
     *         all <code>BasisObjektverknuepfung</code>
     */
    public static List<BasisObjektverknuepfung> getAll() {
        log.debug("Getting all BasisObjektverknuepfung instances");
        String query = "FROM BasisObjektverknuepfung";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<BasisObjektverknuepfung> resultList = new ArrayList<BasisObjektverknuepfung>();
        BasisObjektverknuepfung result = null;
        for (Object object : objectList) {
            result = (BasisObjektverknuepfung) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
