/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.generated.atl;

import de.bielefeld.umweltamt.aui.mappings.generated.basis.BasisSachbearbeiter;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.bielefeld.umweltamt.aui.utils.DatabaseAccess;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A class that represents a row in the AtlProbenahmen database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class AtlProbenahmen  implements java.io.Serializable {

    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private AtlStatus atlStatus;
    private AtlProbepkt atlProbepkt;
    private BasisSachbearbeiter basisSachbearbeiter;
    private String kennummer;
    private String art;
    private Calendar datumDerEntnahme;
    private Date zeitAnfang;
    private Calendar bisDatum;
    private String zeitDerEntnahmen;
    private Float einwaage;
    private String VM3;
    private String fahrer;
    private String objektNr;
    private Calendar datumIcp;
    private String sonderparameter;
    private String bemerkung;
    private Calendar an360x11;
    private String ueberschreitung;
    private Integer anzahlbeteiligte;
    private String uhrzeitbeginn;
    private String uhrzeitende;
    private String fahrtzeit;
    private Calendar bescheid;
    private Double kosten;
    private String massnahmen;
    private String bezeichnung;
    private Integer uschivorg;
    private boolean enabled;
    private boolean deleted;
    private Set<AtlAnalyseposition> atlAnalysepositions = new HashSet<AtlAnalyseposition>(0);

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public AtlProbenahmen() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public AtlProbenahmen(
        boolean enabled, boolean deleted) {
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public AtlProbenahmen(
        AtlStatus atlStatus, AtlProbepkt atlProbepkt, BasisSachbearbeiter basisSachbearbeiter, String kennummer, String art, Calendar datumDerEntnahme, Date zeitAnfang, Calendar bisDatum, String zeitDerEntnahmen, Float einwaage, String VM3, String fahrer, String objektNr, Calendar datumIcp, String sonderparameter, String bemerkung, Calendar an360x11, String ueberschreitung, Integer anzahlbeteiligte, String uhrzeitbeginn, String uhrzeitende, String fahrtzeit, Calendar bescheid, Double kosten, String massnahmen, String bezeichnung, Integer uschivorg, boolean enabled, boolean deleted, Set<AtlAnalyseposition> atlAnalysepositions) {
        this.atlStatus = atlStatus;
        this.atlProbepkt = atlProbepkt;
        this.basisSachbearbeiter = basisSachbearbeiter;
        this.kennummer = kennummer;
        this.art = art;
        this.datumDerEntnahme = datumDerEntnahme;
        this.zeitAnfang = zeitAnfang;
        this.bisDatum = bisDatum;
        this.zeitDerEntnahmen = zeitDerEntnahmen;
        this.einwaage = einwaage;
        this.VM3 = VM3;
        this.fahrer = fahrer;
        this.objektNr = objektNr;
        this.datumIcp = datumIcp;
        this.sonderparameter = sonderparameter;
        this.bemerkung = bemerkung;
        this.an360x11 = an360x11;
        this.ueberschreitung = ueberschreitung;
        this.anzahlbeteiligte = anzahlbeteiligte;
        this.uhrzeitbeginn = uhrzeitbeginn;
        this.uhrzeitende = uhrzeitende;
        this.fahrtzeit = fahrtzeit;
        this.bescheid = bescheid;
        this.kosten = kosten;
        this.massnahmen = massnahmen;
        this.bezeichnung = bezeichnung;
        this.uschivorg = uschivorg;
        this.enabled = enabled;
        this.deleted = deleted;
        this.atlAnalysepositions = atlAnalysepositions;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public AtlStatus getAtlStatus() {
        return this.atlStatus;
    }

    public void setAtlStatus(AtlStatus atlStatus) {
        this.atlStatus = atlStatus;
    }

    public AtlProbepkt getAtlProbepkt() {
        return this.atlProbepkt;
    }

    public void setAtlProbepkt(AtlProbepkt atlProbepkt) {
        this.atlProbepkt = atlProbepkt;
    }

    public BasisSachbearbeiter getBasisSachbearbeiter() {
        return this.basisSachbearbeiter;
    }

    public void setBasisSachbearbeiter(BasisSachbearbeiter basisSachbearbeiter) {
        this.basisSachbearbeiter = basisSachbearbeiter;
    }

    public String getKennummer() {
        return this.kennummer;
    }

    public void setKennummer(String kennummer) {
        this.kennummer = kennummer;
    }

    public String getArt() {
        return this.art;
    }

    public void setArt(String art) {
        this.art = art;
    }

    public Calendar getDatumDerEntnahme() {
        return this.datumDerEntnahme;
    }

    public void setDatumDerEntnahme(Calendar datumDerEntnahme) {
        this.datumDerEntnahme = datumDerEntnahme;
    }

    public Date getZeitAnfang() {
        return this.zeitAnfang;
    }

    public void setZeitAnfang(Date zeitAnfang) {
        this.zeitAnfang = zeitAnfang;
    }

    public Calendar getBisDatum() {
        return this.bisDatum;
    }

    public void setBisDatum(Calendar bisDatum) {
        this.bisDatum = bisDatum;
    }

    public String getZeitDerEntnahmen() {
        return this.zeitDerEntnahmen;
    }

    public void setZeitDerEntnahmen(String zeitDerEntnahmen) {
        this.zeitDerEntnahmen = zeitDerEntnahmen;
    }

    public Float getEinwaage() {
        return this.einwaage;
    }

    public void setEinwaage(Float einwaage) {
        this.einwaage = einwaage;
    }

    public String getVM3() {
        return this.VM3;
    }

    public void setVM3(String VM3) {
        this.VM3 = VM3;
    }

    public String getFahrer() {
        return this.fahrer;
    }

    public void setFahrer(String fahrer) {
        this.fahrer = fahrer;
    }

    public String getObjektNr() {
        return this.objektNr;
    }

    public void setObjektNr(String objektNr) {
        this.objektNr = objektNr;
    }

    public Calendar getDatumIcp() {
        return this.datumIcp;
    }

    public void setDatumIcp(Calendar datumIcp) {
        this.datumIcp = datumIcp;
    }

    public String getSonderparameter() {
        return this.sonderparameter;
    }

    public void setSonderparameter(String sonderparameter) {
        this.sonderparameter = sonderparameter;
    }

    public String getBemerkung() {
        return this.bemerkung;
    }

    public void setBemerkung(String bemerkung) {
        this.bemerkung = bemerkung;
    }

    public Calendar getAn360x11() {
        return this.an360x11;
    }

    public void setAn360x11(Calendar an360x11) {
        this.an360x11 = an360x11;
    }

    public String getUeberschreitung() {
        return this.ueberschreitung;
    }

    public void setUeberschreitung(String ueberschreitung) {
        this.ueberschreitung = ueberschreitung;
    }

    public Integer getAnzahlbeteiligte() {
        return this.anzahlbeteiligte;
    }

    public void setAnzahlbeteiligte(Integer anzahlbeteiligte) {
        this.anzahlbeteiligte = anzahlbeteiligte;
    }

    public String getUhrzeitbeginn() {
        return this.uhrzeitbeginn;
    }

    public void setUhrzeitbeginn(String uhrzeitbeginn) {
        this.uhrzeitbeginn = uhrzeitbeginn;
    }

    public String getUhrzeitende() {
        return this.uhrzeitende;
    }

    public void setUhrzeitende(String uhrzeitende) {
        this.uhrzeitende = uhrzeitende;
    }

    public String getFahrtzeit() {
        return this.fahrtzeit;
    }

    public void setFahrtzeit(String fahrtzeit) {
        this.fahrtzeit = fahrtzeit;
    }

    public Calendar getBescheid() {
        return this.bescheid;
    }

    public void setBescheid(Calendar bescheid) {
        this.bescheid = bescheid;
    }

    public Double getKosten() {
        return this.kosten;
    }

    public void setKosten(Double kosten) {
        this.kosten = kosten;
    }

    public String getMassnahmen() {
        return this.massnahmen;
    }

    public void setMassnahmen(String massnahmen) {
        this.massnahmen = massnahmen;
    }

    public String getBezeichnung() {
        return this.bezeichnung;
    }

    public void setBezeichnung(String bezeichnung) {
        this.bezeichnung = bezeichnung;
    }

    public Integer getUschivorg() {
        return this.uschivorg;
    }

    public void setUschivorg(Integer uschivorg) {
        this.uschivorg = uschivorg;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Set<AtlAnalyseposition> getAtlAnalysepositions() {
        return this.atlAnalysepositions;
    }

    public void setAtlAnalysepositions(Set<AtlAnalyseposition> atlAnalysepositions) {
        this.atlAnalysepositions = atlAnalysepositions;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>AtlProbenahmen</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static AtlProbenahmen merge(AtlProbenahmen detachedInstance) {
        log.debug("Merging AtlProbenahmen instance " + detachedInstance);
        return (AtlProbenahmen) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return AtlProbenahmen.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(AtlProbenahmen detachedInstance) {
        log.debug("Deleting AtlProbenahmen instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return AtlProbenahmen.delete(this);
    }

    /**
     * Find an <code>AtlProbenahmen</code> instance by its primary key
     * @param id the primary key value
     * @return <code>AtlProbenahmen</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static AtlProbenahmen findById(java.lang.Integer id) {
        log.debug("Getting AtlProbenahmen instance with id: " + id);
        return (AtlProbenahmen)
            new DatabaseAccess().get(AtlProbenahmen.class, id);
    }

    /**
     * Get a list of all <code>AtlProbenahmen</code>
     * @return <code>List&lt;AtlProbenahmen&gt;</code>
     *         all <code>AtlProbenahmen</code>
     */
    public static List<AtlProbenahmen> getAll() {
        log.debug("Getting all AtlProbenahmen instances");
        String query = "FROM AtlProbenahmen";
        List<?> objectList = new DatabaseAccess().createQuery(query).list(); 
        List<AtlProbenahmen> resultList = new ArrayList<AtlProbenahmen>();
        AtlProbenahmen result = null;
        for (Object object : objectList) {
            result = (AtlProbenahmen) object;
            resultList.add(result); 
        }
        return resultList;
    }

    /* Custom code goes below here! */

}
