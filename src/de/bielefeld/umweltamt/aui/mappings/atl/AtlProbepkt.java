/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.atl;

import de.bielefeld.umweltamt.aui.HibernateSessionFactory;
import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.basis.BasisObjekt;
import de.bielefeld.umweltamt.aui.mappings.basis.BasisSachbearbeiter;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A class that represents a row in the AtlProbepkt database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class AtlProbepkt  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forAtlProbepkt;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private AtlKlaeranlagen atlKlaeranlagen;
    private AtlProbeart atlProbeart;
    private BasisObjekt basisObjekt;
    private BasisSachbearbeiter basisSachbearbeiter;
    private String beschreibung;
    private Integer nrProbepkt;
    private Integer firmenId;
    private String branche;
    private boolean enabled;
    private boolean deleted;
    private Set<AtlProbenahmen> atlProbenahmens = new HashSet<AtlProbenahmen>(0);
    private AtlSielhaut atlSielhaut;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public AtlProbepkt() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public AtlProbepkt(
        Integer id, BasisObjekt basisObjekt, boolean enabled, boolean deleted) {
        this.id = id;
        this.basisObjekt = basisObjekt;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public AtlProbepkt(
        Integer id, AtlKlaeranlagen atlKlaeranlagen, AtlProbeart atlProbeart, BasisObjekt basisObjekt, BasisSachbearbeiter basisSachbearbeiter, String beschreibung, Integer nrProbepkt, Integer firmenId, String branche, boolean enabled, boolean deleted, Set<AtlProbenahmen> atlProbenahmens, AtlSielhaut atlSielhaut) {
        this.id = id;
        this.atlKlaeranlagen = atlKlaeranlagen;
        this.atlProbeart = atlProbeart;
        this.basisObjekt = basisObjekt;
        this.basisSachbearbeiter = basisSachbearbeiter;
        this.beschreibung = beschreibung;
        this.nrProbepkt = nrProbepkt;
        this.firmenId = firmenId;
        this.branche = branche;
        this.enabled = enabled;
        this.deleted = deleted;
        this.atlProbenahmens = atlProbenahmens;
        this.atlSielhaut = atlSielhaut;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public AtlKlaeranlagen getAtlKlaeranlagen() {
        return this.atlKlaeranlagen;
    }

    public void setAtlKlaeranlagen(AtlKlaeranlagen atlKlaeranlagen) {
        this.atlKlaeranlagen = atlKlaeranlagen;
    }

    public AtlProbeart getAtlProbeart() {
        return this.atlProbeart;
    }

    public void setAtlProbeart(AtlProbeart atlProbeart) {
        this.atlProbeart = atlProbeart;
    }

    public BasisObjekt getBasisObjekt() {
        return this.basisObjekt;
    }

    public void setBasisObjekt(BasisObjekt basisObjekt) {
        this.basisObjekt = basisObjekt;
    }

    public BasisSachbearbeiter getBasisSachbearbeiter() {
        return this.basisSachbearbeiter;
    }

    public void setBasisSachbearbeiter(BasisSachbearbeiter basisSachbearbeiter) {
        this.basisSachbearbeiter = basisSachbearbeiter;
    }

    public String getBeschreibung() {
        return this.beschreibung;
    }

    public void setBeschreibung(String beschreibung) {
        this.beschreibung = beschreibung;
    }

    public Integer getNrProbepkt() {
        return this.nrProbepkt;
    }

    public void setNrProbepkt(Integer nrProbepkt) {
        this.nrProbepkt = nrProbepkt;
    }

    public Integer getFirmenId() {
        return this.firmenId;
    }

    public void setFirmenId(Integer firmenId) {
        this.firmenId = firmenId;
    }

    public String getBranche() {
        return this.branche;
    }

    public void setBranche(String branche) {
        this.branche = branche;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Set<AtlProbenahmen> getAtlProbenahmens() {
        return this.atlProbenahmens;
    }

    public void setAtlProbenahmens(Set<AtlProbenahmen> atlProbenahmens) {
        this.atlProbenahmens = atlProbenahmens;
    }

    public AtlSielhaut getAtlSielhaut() {
        return this.atlSielhaut;
    }

    public void setAtlSielhaut(AtlSielhaut atlSielhaut) {
        this.atlSielhaut = atlSielhaut;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("id").append("='").append(getId()).append("' ");			
        buffer.append("atlKlaeranlagen").append("='").append(getAtlKlaeranlagen()).append("' ");			
        buffer.append("atlProbeart").append("='").append(getAtlProbeart()).append("' ");			
        buffer.append("basisObjekt").append("='").append(getBasisObjekt()).append("' ");			
        buffer.append("basisSachbearbeiter").append("='").append(getBasisSachbearbeiter()).append("' ");			
        buffer.append("beschreibung").append("='").append(getBeschreibung()).append("' ");			
        buffer.append("nrProbepkt").append("='").append(getNrProbepkt()).append("' ");			
        buffer.append("firmenId").append("='").append(getFirmenId()).append("' ");			
        buffer.append("branche").append("='").append(getBranche()).append("' ");			
        buffer.append("enabled").append("='").append(isEnabled()).append("' ");			
        buffer.append("deleted").append("='").append(isDeleted()).append("' ");			
        buffer.append("atlProbenahmens").append("='").append(getAtlProbenahmens()).append("' ");			
        buffer.append("atlSielhaut").append("='").append(getAtlSielhaut()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof AtlProbepkt)) return false;
        return (this.getId().equals(
            ((AtlProbepkt) other).getId()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getId() == null ?
            0 : this.getId().hashCode();
        result = result * 37 + idValue;
        return result;
    }
    
    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>AtlProbepkt</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static AtlProbepkt merge(AtlProbepkt detachedInstance) {
        log.debug("Merging AtlProbepkt instance " + detachedInstance);
        return (AtlProbepkt) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        AtlProbepkt saved = AtlProbepkt.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this AtlProbepkt with its new values.<br>
     * This is meant to be used after merging!
     * @param copy AtlProbepkt
     */
    private void copy(AtlProbepkt copy) {
        this.id = copy.getId();            
        this.atlKlaeranlagen = copy.getAtlKlaeranlagen();            
        this.atlProbeart = copy.getAtlProbeart();            
        this.basisObjekt = copy.getBasisObjekt();            
        this.basisSachbearbeiter = copy.getBasisSachbearbeiter();            
        this.beschreibung = copy.getBeschreibung();            
        this.nrProbepkt = copy.getNrProbepkt();            
        this.firmenId = copy.getFirmenId();            
        this.branche = copy.getBranche();            
        this.enabled = copy.isEnabled();            
        this.deleted = copy.isDeleted();            
        this.atlProbenahmens = copy.getAtlProbenahmens();            
        this.atlSielhaut = copy.getAtlSielhaut();            
    }    

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(AtlProbepkt detachedInstance) {
        log.debug("Deleting AtlProbepkt instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return AtlProbepkt.delete(this);
    }

    /**
     * Find an <code>AtlProbepkt</code> instance by its primary key
     * @param id the primary key value
     * @return <code>AtlProbepkt</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static AtlProbepkt findById(java.lang.Integer id) {
        log.debug("Getting AtlProbepkt instance with id: " + id);
        return (AtlProbepkt)
            new DatabaseAccess().get(AtlProbepkt.class, id);
    }

    /**
     * Get a list of all <code>AtlProbepkt</code>
     * @return <code>List&lt;AtlProbepkt&gt;</code>
     *         all <code>AtlProbepkt</code>
     */
    public static List<AtlProbepkt> getAll() {
        return DatabaseQuery.getAll(new AtlProbepkt());
    }

    /* Custom code goes below here! */
    public static AtlProbepkt findByObjektId(java.lang.Integer id){
        log.debug("Getting AtlProbepkt instance with connected BasisObjekt with id: " + id);
        List<AtlProbepkt> all = AtlProbepkt.getAll();
        for(AtlProbepkt i : all){
            if(i.getBasisObjekt().getId().equals(id)){
                return (AtlProbepkt) new DatabaseAccess().get(AtlProbepkt.class, i.getId());
            }
        }
        log.debug("Found no Atlprobepkt instance with attached BasisObjekt#" + id);
        return null;
        /*BasisObjekt objekt = (BasisObjekt) HibernateSessionFactory.currentSession().createQuery("from BasisObjekt o where o.id= " + id).list().get(0);

        //BasisObjekt.findById(id);
        Set<AtlProbepkt> list = objekt.getAtlProbepkts();
        return list.iterator().next();*/
    }
}
