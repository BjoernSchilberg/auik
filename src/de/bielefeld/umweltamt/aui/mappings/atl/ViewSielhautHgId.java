/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.atl;

import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import java.io.Serializable;
import java.util.Date;

/**
 * A class that represents a row in the ViewSielhautHgId database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class ViewSielhautHgId  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forViewSielhautHgId;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private Float wert;
    private String kennummer;
    private Date datumDerEntnahme;
    private Boolean PSielhaut;
    private Boolean PNachprobe;
    private Boolean PFirmenprobe;
    private Boolean deleted;
    private Double e32;
    private Double n32;
    private Serializable theGeom;

    /** Default constructor */
    public ViewSielhautHgId() {
        // This place is intentionally left blank.
    }


    /** Full constructor */
    public ViewSielhautHgId(
        Integer id, Float wert, String kennummer, Date datumDerEntnahme, Boolean PSielhaut, Boolean PNachprobe, Boolean PFirmenprobe, Boolean deleted, Double e32, Double n32, Serializable theGeom) {
        this.id = id;
        this.wert = wert;
        this.kennummer = kennummer;
        this.datumDerEntnahme = datumDerEntnahme;
        this.PSielhaut = PSielhaut;
        this.PNachprobe = PNachprobe;
        this.PFirmenprobe = PFirmenprobe;
        this.deleted = deleted;
        this.e32 = e32;
        this.n32 = n32;
        this.theGeom = theGeom;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Float getWert() {
        return this.wert;
    }

    public void setWert(Float wert) {
        this.wert = wert;
    }

    public String getKennummer() {
        return this.kennummer;
    }

    public void setKennummer(String kennummer) {
        this.kennummer = kennummer;
    }

    public Date getDatumDerEntnahme() {
        return this.datumDerEntnahme;
    }

    public void setDatumDerEntnahme(Date datumDerEntnahme) {
        this.datumDerEntnahme = datumDerEntnahme;
    }

    public Boolean getPSielhaut() {
        return this.PSielhaut;
    }

    public void setPSielhaut(Boolean PSielhaut) {
        this.PSielhaut = PSielhaut;
    }

    public Boolean getPNachprobe() {
        return this.PNachprobe;
    }

    public void setPNachprobe(Boolean PNachprobe) {
        this.PNachprobe = PNachprobe;
    }

    public Boolean getPFirmenprobe() {
        return this.PFirmenprobe;
    }

    public void setPFirmenprobe(Boolean PFirmenprobe) {
        this.PFirmenprobe = PFirmenprobe;
    }

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public Double getE32() {
        return this.e32;
    }

    public void setE32(Double e32) {
        this.e32 = e32;
    }

    public Double getN32() {
        return this.n32;
    }

    public void setN32(Double n32) {
        this.n32 = n32;
    }

    public Serializable getTheGeom() {
        return this.theGeom;
    }

    public void setTheGeom(Serializable theGeom) {
        this.theGeom = theGeom;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("id").append("='").append(getId()).append("' ");			
        buffer.append("wert").append("='").append(getWert()).append("' ");			
        buffer.append("kennummer").append("='").append(getKennummer()).append("' ");			
        buffer.append("datumDerEntnahme").append("='").append(getDatumDerEntnahme()).append("' ");			
        buffer.append("PSielhaut").append("='").append(getPSielhaut()).append("' ");			
        buffer.append("PNachprobe").append("='").append(getPNachprobe()).append("' ");			
        buffer.append("PFirmenprobe").append("='").append(getPFirmenprobe()).append("' ");			
        buffer.append("deleted").append("='").append(getDeleted()).append("' ");			
        buffer.append("e32").append("='").append(getE32()).append("' ");			
        buffer.append("n32").append("='").append(getN32()).append("' ");			
        buffer.append("theGeom").append("='").append(getTheGeom()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    /* Custom code goes below here! */

}
