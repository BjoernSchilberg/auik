/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.atl;

import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import java.util.Date;

/**
 * A class that represents a row in the ViewSielhautqbKreuztabelleRoutineId database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class ViewSielhautqbKreuztabelleRoutineId  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forViewSielhautqbKreuztabelleRoutineId;
    
    /* Primary key, foreign keys (relations) and table columns */
    private String kennummer;
    private Integer id;
    private String lage;
    private String bezeichnung;
    private Date datumDerEntnahme;
    private Double cadmium;
    private Double chrom;
    private Double kupfer;
    private Double quecksilber;
    private Double nickel;
    private Double blei;
    private Double zink;

    /** Default constructor */
    public ViewSielhautqbKreuztabelleRoutineId() {
        // This place is intentionally left blank.
    }


    /** Full constructor */
    public ViewSielhautqbKreuztabelleRoutineId(
        String kennummer, Integer id, String lage, String bezeichnung, Date datumDerEntnahme, Double cadmium, Double chrom, Double kupfer, Double quecksilber, Double nickel, Double blei, Double zink) {
        this.kennummer = kennummer;
        this.id = id;
        this.lage = lage;
        this.bezeichnung = bezeichnung;
        this.datumDerEntnahme = datumDerEntnahme;
        this.cadmium = cadmium;
        this.chrom = chrom;
        this.kupfer = kupfer;
        this.quecksilber = quecksilber;
        this.nickel = nickel;
        this.blei = blei;
        this.zink = zink;
    }

    /* Setter and getter methods */
    public String getKennummer() {
        return this.kennummer;
    }

    public void setKennummer(String kennummer) {
        this.kennummer = kennummer;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLage() {
        return this.lage;
    }

    public void setLage(String lage) {
        this.lage = lage;
    }

    public String getBezeichnung() {
        return this.bezeichnung;
    }

    public void setBezeichnung(String bezeichnung) {
        this.bezeichnung = bezeichnung;
    }

    public Date getDatumDerEntnahme() {
        return this.datumDerEntnahme;
    }

    public void setDatumDerEntnahme(Date datumDerEntnahme) {
        this.datumDerEntnahme = datumDerEntnahme;
    }

    public Double getCadmium() {
        return this.cadmium;
    }

    public void setCadmium(Double cadmium) {
        this.cadmium = cadmium;
    }

    public Double getChrom() {
        return this.chrom;
    }

    public void setChrom(Double chrom) {
        this.chrom = chrom;
    }

    public Double getKupfer() {
        return this.kupfer;
    }

    public void setKupfer(Double kupfer) {
        this.kupfer = kupfer;
    }

    public Double getQuecksilber() {
        return this.quecksilber;
    }

    public void setQuecksilber(Double quecksilber) {
        this.quecksilber = quecksilber;
    }

    public Double getNickel() {
        return this.nickel;
    }

    public void setNickel(Double nickel) {
        this.nickel = nickel;
    }

    public Double getBlei() {
        return this.blei;
    }

    public void setBlei(Double blei) {
        this.blei = blei;
    }

    public Double getZink() {
        return this.zink;
    }

    public void setZink(Double zink) {
        this.zink = zink;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("kennummer").append("='").append(getKennummer()).append("' ");			
        buffer.append("id").append("='").append(getId()).append("' ");			
        buffer.append("lage").append("='").append(getLage()).append("' ");			
        buffer.append("bezeichnung").append("='").append(getBezeichnung()).append("' ");			
        buffer.append("datumDerEntnahme").append("='").append(getDatumDerEntnahme()).append("' ");			
        buffer.append("cadmium").append("='").append(getCadmium()).append("' ");			
        buffer.append("chrom").append("='").append(getChrom()).append("' ");			
        buffer.append("kupfer").append("='").append(getKupfer()).append("' ");			
        buffer.append("quecksilber").append("='").append(getQuecksilber()).append("' ");			
        buffer.append("nickel").append("='").append(getNickel()).append("' ");			
        buffer.append("blei").append("='").append(getBlei()).append("' ");			
        buffer.append("zink").append("='").append(getZink()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    /* Custom code goes below here! */

}
