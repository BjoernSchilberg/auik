/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.atl;

import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import java.io.Serializable;
import java.util.Date;

/**
 * A class that represents a row in the ViewQgisAnalysepositionId database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class ViewQgisAnalysepositionId  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forViewQgisAnalysepositionId;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private Serializable theGeom;
    private Date now;
    private String probeId;
    private Date probeDatum;
    private String parameterId;
    private String parameter;
    private Float absWert;
    private Double grenzwert;
    private Double relWert;
    private String bezeichnung;

    /** Default constructor */
    public ViewQgisAnalysepositionId() {
        // This place is intentionally left blank.
    }


    /** Full constructor */
    public ViewQgisAnalysepositionId(
        Integer id, Serializable theGeom, Date now, String probeId, Date probeDatum, String parameterId, String parameter, Float absWert, Double grenzwert, Double relWert, String bezeichnung) {
        this.id = id;
        this.theGeom = theGeom;
        this.now = now;
        this.probeId = probeId;
        this.probeDatum = probeDatum;
        this.parameterId = parameterId;
        this.parameter = parameter;
        this.absWert = absWert;
        this.grenzwert = grenzwert;
        this.relWert = relWert;
        this.bezeichnung = bezeichnung;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Serializable getTheGeom() {
        return this.theGeom;
    }

    public void setTheGeom(Serializable theGeom) {
        this.theGeom = theGeom;
    }

    public Date getNow() {
        return this.now;
    }

    public void setNow(Date now) {
        this.now = now;
    }

    public String getProbeId() {
        return this.probeId;
    }

    public void setProbeId(String probeId) {
        this.probeId = probeId;
    }

    public Date getProbeDatum() {
        return this.probeDatum;
    }

    public void setProbeDatum(Date probeDatum) {
        this.probeDatum = probeDatum;
    }

    public String getParameterId() {
        return this.parameterId;
    }

    public void setParameterId(String parameterId) {
        this.parameterId = parameterId;
    }

    public String getParameter() {
        return this.parameter;
    }

    public void setParameter(String parameter) {
        this.parameter = parameter;
    }

    public Float getAbsWert() {
        return this.absWert;
    }

    public void setAbsWert(Float absWert) {
        this.absWert = absWert;
    }

    public Double getGrenzwert() {
        return this.grenzwert;
    }

    public void setGrenzwert(Double grenzwert) {
        this.grenzwert = grenzwert;
    }

    public Double getRelWert() {
        return this.relWert;
    }

    public void setRelWert(Double relWert) {
        this.relWert = relWert;
    }

    public String getBezeichnung() {
        return this.bezeichnung;
    }

    public void setBezeichnung(String bezeichnung) {
        this.bezeichnung = bezeichnung;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("id").append("='").append(getId()).append("' ");			
        buffer.append("theGeom").append("='").append(getTheGeom()).append("' ");			
        buffer.append("now").append("='").append(getNow()).append("' ");			
        buffer.append("probeId").append("='").append(getProbeId()).append("' ");			
        buffer.append("probeDatum").append("='").append(getProbeDatum()).append("' ");			
        buffer.append("parameterId").append("='").append(getParameterId()).append("' ");			
        buffer.append("parameter").append("='").append(getParameter()).append("' ");			
        buffer.append("absWert").append("='").append(getAbsWert()).append("' ");			
        buffer.append("grenzwert").append("='").append(getGrenzwert()).append("' ");			
        buffer.append("relWert").append("='").append(getRelWert()).append("' ");			
        buffer.append("bezeichnung").append("='").append(getBezeichnung()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    /* Custom code goes below here! */

}
