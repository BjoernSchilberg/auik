/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.tipi;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.tipi.DatabaseTipi;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.nrw.lds.tipi.general.HistoryObject;
import java.util.Calendar;
import java.util.List;

/**
 * A class that represents a row in the InkaProbenahme database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class InkaProbenahme  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID = DatabaseTipi.serialVersionUIDForInkaProbenahme;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer probenahmeNr;
    private Integer probenahmeVer;
    private Calendar gueltigVon;
    private Calendar gueltigBis;
    private Calendar aenderungsDatum;
    private Calendar erfassungsDatum;
    private Integer historienNr;
    private Boolean istAktuellJn;
    private String gemeindekennzahl;
    private Integer gemeindeVer;
    private Integer uebergabestelleLfdNr;
    private Integer uebergabestelleVer;
    private Integer messstelleLfdNr;
    private Integer messstelleVer;
    private String probSchluessel;
    private Integer probVer;
    private Calendar datumAnalyse;
    private Boolean selbstueberwJn;
    private String probeNr;
    private Boolean durchflussmessungJn;
    private Boolean registrierungJn;
    private Double q05h;
    private Double q2h;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public InkaProbenahme() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public InkaProbenahme(
        Integer probenahmeNr) {
        this.probenahmeNr = probenahmeNr;
    }

    /** Full constructor */
    public InkaProbenahme(
        Integer probenahmeNr, Integer probenahmeVer, Calendar gueltigVon, Calendar gueltigBis, Calendar aenderungsDatum, Calendar erfassungsDatum, Integer historienNr, Boolean istAktuellJn, String gemeindekennzahl, Integer gemeindeVer, Integer uebergabestelleLfdNr, Integer uebergabestelleVer, Integer messstelleLfdNr, Integer messstelleVer, String probSchluessel, Integer probVer, Calendar datumAnalyse, Boolean selbstueberwJn, String probeNr, Boolean durchflussmessungJn, Boolean registrierungJn, Double q05h, Double q2h) {
        this.probenahmeNr = probenahmeNr;
        this.probenahmeVer = probenahmeVer;
        this.gueltigVon = gueltigVon;
        this.gueltigBis = gueltigBis;
        this.aenderungsDatum = aenderungsDatum;
        this.erfassungsDatum = erfassungsDatum;
        this.historienNr = historienNr;
        this.istAktuellJn = istAktuellJn;
        this.gemeindekennzahl = gemeindekennzahl;
        this.gemeindeVer = gemeindeVer;
        this.uebergabestelleLfdNr = uebergabestelleLfdNr;
        this.uebergabestelleVer = uebergabestelleVer;
        this.messstelleLfdNr = messstelleLfdNr;
        this.messstelleVer = messstelleVer;
        this.probSchluessel = probSchluessel;
        this.probVer = probVer;
        this.datumAnalyse = datumAnalyse;
        this.selbstueberwJn = selbstueberwJn;
        this.probeNr = probeNr;
        this.durchflussmessungJn = durchflussmessungJn;
        this.registrierungJn = registrierungJn;
        this.q05h = q05h;
        this.q2h = q2h;
    }

    /* Setter and getter methods */
    public Integer getProbenahmeNr() {
        return this.probenahmeNr;
    }

    public void setProbenahmeNr(Integer probenahmeNr) {
        this.probenahmeNr = probenahmeNr;
    }

    public Integer getProbenahmeVer() {
        return this.probenahmeVer;
    }

    public void setProbenahmeVer(Integer probenahmeVer) {
        this.probenahmeVer = probenahmeVer;
    }

    public Calendar getGueltigVon() {
        return this.gueltigVon;
    }

    public void setGueltigVon(Calendar gueltigVon) {
        this.gueltigVon = gueltigVon;
    }

    public Calendar getGueltigBis() {
        return this.gueltigBis;
    }

    public void setGueltigBis(Calendar gueltigBis) {
        this.gueltigBis = gueltigBis;
    }

    public Calendar getAenderungsDatum() {
        return this.aenderungsDatum;
    }

    public void setAenderungsDatum(Calendar aenderungsDatum) {
        this.aenderungsDatum = aenderungsDatum;
    }

    public Calendar getErfassungsDatum() {
        return this.erfassungsDatum;
    }

    public void setErfassungsDatum(Calendar erfassungsDatum) {
        this.erfassungsDatum = erfassungsDatum;
    }

    public Integer getHistorienNr() {
        return this.historienNr;
    }

    public void setHistorienNr(Integer historienNr) {
        this.historienNr = historienNr;
    }

    public Boolean getIstAktuellJn() {
        return this.istAktuellJn;
    }

    public void setIstAktuellJn(Boolean istAktuellJn) {
        this.istAktuellJn = istAktuellJn;
    }

    public String getGemeindekennzahl() {
        return this.gemeindekennzahl;
    }

    public void setGemeindekennzahl(String gemeindekennzahl) {
        this.gemeindekennzahl = gemeindekennzahl;
    }

    public Integer getGemeindeVer() {
        return this.gemeindeVer;
    }

    public void setGemeindeVer(Integer gemeindeVer) {
        this.gemeindeVer = gemeindeVer;
    }

    public Integer getUebergabestelleLfdNr() {
        return this.uebergabestelleLfdNr;
    }

    public void setUebergabestelleLfdNr(Integer uebergabestelleLfdNr) {
        this.uebergabestelleLfdNr = uebergabestelleLfdNr;
    }

    public Integer getUebergabestelleVer() {
        return this.uebergabestelleVer;
    }

    public void setUebergabestelleVer(Integer uebergabestelleVer) {
        this.uebergabestelleVer = uebergabestelleVer;
    }

    public Integer getMessstelleLfdNr() {
        return this.messstelleLfdNr;
    }

    public void setMessstelleLfdNr(Integer messstelleLfdNr) {
        this.messstelleLfdNr = messstelleLfdNr;
    }

    public Integer getMessstelleVer() {
        return this.messstelleVer;
    }

    public void setMessstelleVer(Integer messstelleVer) {
        this.messstelleVer = messstelleVer;
    }

    public String getProbSchluessel() {
        return this.probSchluessel;
    }

    public void setProbSchluessel(String probSchluessel) {
        this.probSchluessel = probSchluessel;
    }

    public Integer getProbVer() {
        return this.probVer;
    }

    public void setProbVer(Integer probVer) {
        this.probVer = probVer;
    }

    public Calendar getDatumAnalyse() {
        return this.datumAnalyse;
    }

    public void setDatumAnalyse(Calendar datumAnalyse) {
        this.datumAnalyse = datumAnalyse;
    }

    public Boolean getSelbstueberwJn() {
        return this.selbstueberwJn;
    }

    public void setSelbstueberwJn(Boolean selbstueberwJn) {
        this.selbstueberwJn = selbstueberwJn;
    }

    public String getProbeNr() {
        return this.probeNr;
    }

    public void setProbeNr(String probeNr) {
        this.probeNr = probeNr;
    }

    public Boolean getDurchflussmessungJn() {
        return this.durchflussmessungJn;
    }

    public void setDurchflussmessungJn(Boolean durchflussmessungJn) {
        this.durchflussmessungJn = durchflussmessungJn;
    }

    public Boolean getRegistrierungJn() {
        return this.registrierungJn;
    }

    public void setRegistrierungJn(Boolean registrierungJn) {
        this.registrierungJn = registrierungJn;
    }

    public Double getQ05h() {
        return this.q05h;
    }

    public void setQ05h(Double q05h) {
        this.q05h = q05h;
    }

    public Double getQ2h() {
        return this.q2h;
    }

    public void setQ2h(Double q2h) {
        this.q2h = q2h;
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("probenahmeNr").append("='").append(getProbenahmeNr()).append("' ");			
        buffer.append("probenahmeVer").append("='").append(getProbenahmeVer()).append("' ");			
        buffer.append("gueltigVon").append("='").append(getGueltigVon()).append("' ");			
        buffer.append("gueltigBis").append("='").append(getGueltigBis()).append("' ");			
        buffer.append("aenderungsDatum").append("='").append(getAenderungsDatum()).append("' ");			
        buffer.append("erfassungsDatum").append("='").append(getErfassungsDatum()).append("' ");			
        buffer.append("historienNr").append("='").append(getHistorienNr()).append("' ");			
        buffer.append("istAktuellJn").append("='").append(getIstAktuellJn()).append("' ");			
        buffer.append("gemeindekennzahl").append("='").append(getGemeindekennzahl()).append("' ");			
        buffer.append("gemeindeVer").append("='").append(getGemeindeVer()).append("' ");			
        buffer.append("uebergabestelleLfdNr").append("='").append(getUebergabestelleLfdNr()).append("' ");			
        buffer.append("uebergabestelleVer").append("='").append(getUebergabestelleVer()).append("' ");			
        buffer.append("messstelleLfdNr").append("='").append(getMessstelleLfdNr()).append("' ");			
        buffer.append("messstelleVer").append("='").append(getMessstelleVer()).append("' ");			
        buffer.append("probSchluessel").append("='").append(getProbSchluessel()).append("' ");			
        buffer.append("probVer").append("='").append(getProbVer()).append("' ");			
        buffer.append("datumAnalyse").append("='").append(getDatumAnalyse()).append("' ");			
        buffer.append("selbstueberwJn").append("='").append(getSelbstueberwJn()).append("' ");			
        buffer.append("probeNr").append("='").append(getProbeNr()).append("' ");			
        buffer.append("durchflussmessungJn").append("='").append(getDurchflussmessungJn()).append("' ");			
        buffer.append("registrierungJn").append("='").append(getRegistrierungJn()).append("' ");			
        buffer.append("q05h").append("='").append(getQ05h()).append("' ");			
        buffer.append("q2h").append("='").append(getQ2h()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>InkaProbenahme</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static InkaProbenahme merge(InkaProbenahme detachedInstance) {
        log.debug("Merging InkaProbenahme instance " + detachedInstance);
        return (InkaProbenahme) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return InkaProbenahme.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(InkaProbenahme detachedInstance) {
        log.debug("Deleting InkaProbenahme instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return InkaProbenahme.delete(this);
    }

    /**
     * Find an <code>InkaProbenahme</code> instance by its primary key
     * @param id the primary key value
     * @return <code>InkaProbenahme</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static InkaProbenahme findById(java.lang.Integer id) {
        log.debug("Getting InkaProbenahme instance with id: " + id);
        return (InkaProbenahme)
            new DatabaseAccess().get(InkaProbenahme.class, id);
    }

    /**
     * Get a list of all <code>InkaProbenahme</code>
     * @return <code>List&lt;InkaProbenahme&gt;</code>
     *         all <code>InkaProbenahme</code>
     */
    public static List<InkaProbenahme> getAll() {
        return DatabaseQuery.getAll(new InkaProbenahme());
    }

    /**
     * As we can not generate this bit of code completely
     * (ordering of the parameters is the main problem),
     * we jump to not generated code.
     * @return HistoryObject (the corresponding service type to InkaProbenahme)
     */
    public HistoryObject toServiceType() {
        return DatabaseTipi.toServiceTypeForClass(this);
    }

    /* Custom code goes below here! */

}
