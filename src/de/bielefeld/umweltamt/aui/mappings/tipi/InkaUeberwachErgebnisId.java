/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.tipi;

import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;

/**
 * A class that represents a row in the InkaUeberwachErgebnisId database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class InkaUeberwachErgebnisId  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forInkaUeberwachErgebnisId;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer parameterNr;
    private Integer probenahmeNr;

    /** Default constructor */
    public InkaUeberwachErgebnisId() {
        // This place is intentionally left blank.
    }


    /** Full constructor */
    public InkaUeberwachErgebnisId(
        Integer parameterNr, Integer probenahmeNr) {
        this.parameterNr = parameterNr;
        this.probenahmeNr = probenahmeNr;
    }

    /* Setter and getter methods */
    public Integer getParameterNr() {
        return this.parameterNr;
    }

    public void setParameterNr(Integer parameterNr) {
        this.parameterNr = parameterNr;
    }

    public Integer getProbenahmeNr() {
        return this.probenahmeNr;
    }

    public void setProbenahmeNr(Integer probenahmeNr) {
        this.probenahmeNr = probenahmeNr;
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("parameterNr").append("='").append(getParameterNr()).append("' ");			
        buffer.append("probenahmeNr").append("='").append(getProbenahmeNr()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    public boolean equals(Object other) {
        if ((this == other )) return true;
        if ((other == null )) return false;
        if (!(other instanceof InkaUeberwachErgebnisId) ) return false;
        InkaUeberwachErgebnisId castOther = ( InkaUeberwachErgebnisId ) other; 
        return ( (this.getParameterNr()==castOther.getParameterNr()) || ( this.getParameterNr()!=null && castOther.getParameterNr()!=null && this.getParameterNr().equals(castOther.getParameterNr()) ) )
 && ( (this.getProbenahmeNr()==castOther.getProbenahmeNr()) || ( this.getProbenahmeNr()!=null && castOther.getProbenahmeNr()!=null && this.getProbenahmeNr().equals(castOther.getProbenahmeNr()) ) );
   }

    public int hashCode() {
        int result = 17;
        result = 37 * result + ( getParameterNr() == null ? 0 : this.getParameterNr().hashCode() );
        result = 37 * result + ( getProbenahmeNr() == null ? 0 : this.getProbenahmeNr().hashCode() );
        return result;
    }
    /* Custom code goes below here! */

}
