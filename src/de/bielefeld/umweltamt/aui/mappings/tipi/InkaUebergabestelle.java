/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.tipi;

import java.util.Calendar;
import java.util.List;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import de.nrw.lds.tipi.general.HistoryObject;

/**
 * A class that represents a row in the InkaUebergabestelle database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class InkaUebergabestelle  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forInkaUebergabestelle;

    /* Primary key, foreign keys (relations) and table columns */
    private Integer uebergabestelleLfdNr;
    private String gemeindekennzahl;
    private Integer gemeindeVer;
    private Integer uebergabestelleVer;
    private Calendar gueltigVon;
    private Calendar gueltigBis;
    private Calendar aenderungsDatum;
    private Calendar erfassungsDatum;
    private Integer historienNr;
    private Boolean istAktuellJn;
    private Integer betriebNr;
    private Integer betriebVer;
    private Integer genehmigungNr;
    private Integer genehmigungVer;
    private Integer anlagenNr;
    private Integer klaeranlagenVer;
    private Integer kartennummer;
    private Integer tk25Ver;
    private Integer kanalArt;
    private Integer e32;
	private Integer n32;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public InkaUebergabestelle() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public InkaUebergabestelle(
        Integer uebergabestelleLfdNr) {
        this.uebergabestelleLfdNr = uebergabestelleLfdNr;
    }

    /** Full constructor */
    public InkaUebergabestelle(
        Integer uebergabestelleLfdNr, String gemeindekennzahl, Integer gemeindeVer, Integer uebergabestelleVer, Calendar gueltigVon, Calendar gueltigBis, Calendar aenderungsDatum, Calendar erfassungsDatum, Integer historienNr, Boolean istAktuellJn, Integer betriebNr, Integer betriebVer, Integer genehmigungNr, Integer genehmigungVer, Integer anlagenNr, Integer klaeranlagenVer, Integer kartennummer, Integer tk25Ver, Integer kanalArt, Integer e32, Integer n32) {
        this.uebergabestelleLfdNr = uebergabestelleLfdNr;
        this.gemeindekennzahl = gemeindekennzahl;
        this.gemeindeVer = gemeindeVer;
        this.uebergabestelleVer = uebergabestelleVer;
        this.gueltigVon = gueltigVon;
        this.gueltigBis = gueltigBis;
        this.aenderungsDatum = aenderungsDatum;
        this.erfassungsDatum = erfassungsDatum;
        this.historienNr = historienNr;
        this.istAktuellJn = istAktuellJn;
        this.betriebNr = betriebNr;
        this.betriebVer = betriebVer;
        this.genehmigungNr = genehmigungNr;
        this.genehmigungVer = genehmigungVer;
        this.anlagenNr = anlagenNr;
        this.klaeranlagenVer = klaeranlagenVer;
        this.kartennummer = kartennummer;
        this.tk25Ver = tk25Ver;
        this.kanalArt = kanalArt;
        this.e32 = e32;
        this.n32 = n32;
    }

    /* Setter and getter methods */
    public Integer getUebergabestelleLfdNr() {
        return this.uebergabestelleLfdNr;
    }

    public void setUebergabestelleLfdNr(Integer uebergabestelleLfdNr) {
        this.uebergabestelleLfdNr = uebergabestelleLfdNr;
    }

    public String getGemeindekennzahl() {
        return this.gemeindekennzahl;
    }

    public void setGemeindekennzahl(String gemeindekennzahl) {
        this.gemeindekennzahl = gemeindekennzahl;
    }

    public Integer getGemeindeVer() {
        return this.gemeindeVer;
    }

    public void setGemeindeVer(Integer gemeindeVer) {
        this.gemeindeVer = gemeindeVer;
    }

    public Integer getUebergabestelleVer() {
        return this.uebergabestelleVer;
    }

    public void setUebergabestelleVer(Integer uebergabestelleVer) {
        this.uebergabestelleVer = uebergabestelleVer;
    }

    public Calendar getGueltigVon() {
        return this.gueltigVon;
    }

    public void setGueltigVon(Calendar gueltigVon) {
        this.gueltigVon = gueltigVon;
    }

    public Calendar getGueltigBis() {
        return this.gueltigBis;
    }

    public void setGueltigBis(Calendar gueltigBis) {
        this.gueltigBis = gueltigBis;
    }

    public Calendar getAenderungsDatum() {
        return this.aenderungsDatum;
    }

    public void setAenderungsDatum(Calendar aenderungsDatum) {
        this.aenderungsDatum = aenderungsDatum;
    }

    public Calendar getErfassungsDatum() {
        return this.erfassungsDatum;
    }

    public void setErfassungsDatum(Calendar erfassungsDatum) {
        this.erfassungsDatum = erfassungsDatum;
    }

    public Integer getHistorienNr() {
        return this.historienNr;
    }

    public void setHistorienNr(Integer historienNr) {
        this.historienNr = historienNr;
    }

    public Boolean getIstAktuellJn() {
        return this.istAktuellJn;
    }

    public void setIstAktuellJn(Boolean istAktuellJn) {
        this.istAktuellJn = istAktuellJn;
    }

    public Integer getBetriebNr() {
        return this.betriebNr;
    }

    public void setBetriebNr(Integer betriebNr) {
        this.betriebNr = betriebNr;
    }

    public Integer getBetriebVer() {
        return this.betriebVer;
    }

    public void setBetriebVer(Integer betriebVer) {
        this.betriebVer = betriebVer;
    }

    public Integer getGenehmigungNr() {
        return this.genehmigungNr;
    }

    public void setGenehmigungNr(Integer genehmigungNr) {
        this.genehmigungNr = genehmigungNr;
    }

    public Integer getGenehmigungVer() {
        return this.genehmigungVer;
    }

    public void setGenehmigungVer(Integer genehmigungVer) {
        this.genehmigungVer = genehmigungVer;
    }

    public Integer getAnlagenNr() {
        return this.anlagenNr;
    }

    public void setAnlagenNr(Integer anlagenNr) {
        this.anlagenNr = anlagenNr;
    }

    public Integer getKlaeranlagenVer() {
        return this.klaeranlagenVer;
    }

    public void setKlaeranlagenVer(Integer klaeranlagenVer) {
        this.klaeranlagenVer = klaeranlagenVer;
    }

    public Integer getKartennummer() {
        return this.kartennummer;
    }

    public void setKartennummer(Integer kartennummer) {
        this.kartennummer = kartennummer;
    }

    public Integer getTk25Ver() {
        return this.tk25Ver;
    }

    public void setTk25Ver(Integer tk25Ver) {
        this.tk25Ver = tk25Ver;
    }

    public Integer getKanalArt() {
        return this.kanalArt;
    }

    public void setKanalArt(Integer kanalArt) {
        this.kanalArt = kanalArt;
    }

    public Integer getE32() {
	    return this.e32;
	}

	public void setE32(Integer e32) {
	    this.e32 = e32;
	}

	public Integer getN32() {
	    return this.n32;
	}

	public void setN32(Integer n32) {
	    this.n32 = n32;
	}

	/**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();

        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("uebergabestelleLfdNr").append("='").append(getUebergabestelleLfdNr()).append("' ");
        buffer.append("gemeindekennzahl").append("='").append(getGemeindekennzahl()).append("' ");
        buffer.append("gemeindeVer").append("='").append(getGemeindeVer()).append("' ");
        buffer.append("uebergabestelleVer").append("='").append(getUebergabestelleVer()).append("' ");
        buffer.append("gueltigVon").append("='").append(getGueltigVon()).append("' ");
        buffer.append("gueltigBis").append("='").append(getGueltigBis()).append("' ");
        buffer.append("aenderungsDatum").append("='").append(getAenderungsDatum()).append("' ");
        buffer.append("erfassungsDatum").append("='").append(getErfassungsDatum()).append("' ");
        buffer.append("historienNr").append("='").append(getHistorienNr()).append("' ");
        buffer.append("istAktuellJn").append("='").append(getIstAktuellJn()).append("' ");
        buffer.append("betriebNr").append("='").append(getBetriebNr()).append("' ");
        buffer.append("betriebVer").append("='").append(getBetriebVer()).append("' ");
        buffer.append("genehmigungNr").append("='").append(getGenehmigungNr()).append("' ");
        buffer.append("genehmigungVer").append("='").append(getGenehmigungVer()).append("' ");
        buffer.append("anlagenNr").append("='").append(getAnlagenNr()).append("' ");
        buffer.append("klaeranlagenVer").append("='").append(getKlaeranlagenVer()).append("' ");
        buffer.append("kartennummer").append("='").append(getKartennummer()).append("' ");
        buffer.append("tk25Ver").append("='").append(getTk25Ver()).append("' ");
        buffer.append("kanalArt").append("='").append(getKanalArt()).append("' ");
        buffer.append("e32").append("='").append(getE32()).append("' ");
        buffer.append("h32").append("='").append(getN32()).append("' ");
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>InkaUebergabestelle</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static InkaUebergabestelle merge(InkaUebergabestelle detachedInstance) {
        log.debug("Merging InkaUebergabestelle instance " + detachedInstance);
        return (InkaUebergabestelle) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        return InkaUebergabestelle.merge(this).equals(this);
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(InkaUebergabestelle detachedInstance) {
        log.debug("Deleting InkaUebergabestelle instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return InkaUebergabestelle.delete(this);
    }

    /**
     * Find an <code>InkaUebergabestelle</code> instance by its primary key
     * @param id the primary key value
     * @return <code>InkaUebergabestelle</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static InkaUebergabestelle findById(java.lang.Integer id) {
        log.debug("Getting InkaUebergabestelle instance with id: " + id);
        return (InkaUebergabestelle)
            new DatabaseAccess().get(InkaUebergabestelle.class, id);
    }

    /**
     * Get a list of all <code>InkaUebergabestelle</code>
     * @return <code>List&lt;InkaUebergabestelle&gt;</code>
     *         all <code>InkaUebergabestelle</code>
     */
    public static List<InkaUebergabestelle> getAll() {
        return DatabaseQuery.getAll(new InkaUebergabestelle());
    }

    /**
     * As we can not generate this bit of code completely
     * (ordering of the parameters is the main problem),
     * we jump to not generated code.
     * @return HistoryObject (the corresponding service type to InkaUebergabestelle)
     */
    public HistoryObject toServiceType() {
        return DatabaseQuery.toServiceTypeForClass(this);
    }

    /* Custom code goes below here! */

}
