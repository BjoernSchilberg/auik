/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.basis;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.awsv.Standortgghwsg;
import de.bielefeld.umweltamt.aui.mappings.awsv.Wassereinzugsgebiet;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A class that represents a row in the Lage database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class Lage  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forLage;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private Standortgghwsg standortgghwsg;
    private Wassereinzugsgebiet wassereinzugsgebiet;
    private Gemarkung gemarkung;
    private String plz;
    private Float e32;
    private Float n32;
    private String flur;
    private String flurstueck;
    private String entgebid;
    private String strasseeigent;
    private Date revidatum;
    private String revihandz;
    private Integer wassermenge;
    private String sachbe33rav;
    private String sachbe33hee;
    private Serializable theGeom;
    private boolean enabled;
    private boolean deleted;
    private Set<Standort> standorts = new HashSet<Standort>(0);

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public Lage() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public Lage(
        Integer id, boolean enabled, boolean deleted) {
        this.id = id;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public Lage(
        Integer id, Standortgghwsg standortgghwsg, Wassereinzugsgebiet wassereinzugsgebiet, Gemarkung gemarkung, String plz, Float e32, Float n32, String flur, String flurstueck, String entgebid, String strasseeigent, Date revidatum, String revihandz, Integer wassermenge, String sachbe33rav, String sachbe33hee, Serializable theGeom, boolean enabled, boolean deleted, Set<Standort> standorts) {
        this.id = id;
        this.standortgghwsg = standortgghwsg;
        this.wassereinzugsgebiet = wassereinzugsgebiet;
        this.gemarkung = gemarkung;
        this.plz = plz;
        this.e32 = e32;
        this.n32 = n32;
        this.flur = flur;
        this.flurstueck = flurstueck;
        this.entgebid = entgebid;
        this.strasseeigent = strasseeigent;
        this.revidatum = revidatum;
        this.revihandz = revihandz;
        this.wassermenge = wassermenge;
        this.sachbe33rav = sachbe33rav;
        this.sachbe33hee = sachbe33hee;
        this.theGeom = theGeom;
        this.enabled = enabled;
        this.deleted = deleted;
        this.standorts = standorts;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Standortgghwsg getStandortgghwsg() {
        return this.standortgghwsg;
    }

    public void setStandortgghwsg(Standortgghwsg standortgghwsg) {
        this.standortgghwsg = standortgghwsg;
    }

    public Wassereinzugsgebiet getWassereinzugsgebiet() {
        return this.wassereinzugsgebiet;
    }

    public void setWassereinzugsgebiet(Wassereinzugsgebiet wassereinzugsgebiet) {
        this.wassereinzugsgebiet = wassereinzugsgebiet;
    }

    public Gemarkung getGemarkung() {
        return this.gemarkung;
    }

    public void setGemarkung(Gemarkung gemarkung) {
        this.gemarkung = gemarkung;
    }

    public String getPlz() {
        return this.plz;
    }

    public void setPlz(String plz) {
        this.plz = plz;
    }

    public Float getE32() {
        return this.e32;
    }

    public void setE32(Float e32) {
        this.e32 = e32;
    }

    public Float getN32() {
        return this.n32;
    }

    public void setN32(Float n32) {
        this.n32 = n32;
    }

    public String getFlur() {
        return this.flur;
    }

    public void setFlur(String flur) {
        this.flur = flur;
    }

    public String getFlurstueck() {
        return this.flurstueck;
    }

    public void setFlurstueck(String flurstueck) {
        this.flurstueck = flurstueck;
    }

    public String getEntgebid() {
        return this.entgebid;
    }

    public void setEntgebid(String entgebid) {
        this.entgebid = entgebid;
    }

    public String getStrasseeigent() {
        return this.strasseeigent;
    }

    public void setStrasseeigent(String strasseeigent) {
        this.strasseeigent = strasseeigent;
    }

    public Date getRevidatum() {
        return this.revidatum;
    }

    public void setRevidatum(Date revidatum) {
        this.revidatum = revidatum;
    }

    public String getRevihandz() {
        return this.revihandz;
    }

    public void setRevihandz(String revihandz) {
        this.revihandz = revihandz;
    }

    public Integer getWassermenge() {
        return this.wassermenge;
    }

    public void setWassermenge(Integer wassermenge) {
        this.wassermenge = wassermenge;
    }

    public String getSachbe33rav() {
        return this.sachbe33rav;
    }

    public void setSachbe33rav(String sachbe33rav) {
        this.sachbe33rav = sachbe33rav;
    }

    public String getSachbe33hee() {
        return this.sachbe33hee;
    }

    public void setSachbe33hee(String sachbe33hee) {
        this.sachbe33hee = sachbe33hee;
    }

    public Serializable getTheGeom() {
        return this.theGeom;
    }

    public void setTheGeom(Serializable theGeom) {
        this.theGeom = theGeom;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public Set<Standort> getStandorts() {
        return this.standorts;
    }

    public void setStandorts(Set<Standort> standorts) {
        this.standorts = standorts;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("id").append("='").append(getId()).append("' ");			
        buffer.append("standortgghwsg").append("='").append(getStandortgghwsg()).append("' ");			
        buffer.append("wassereinzugsgebiet").append("='").append(getWassereinzugsgebiet()).append("' ");			
        buffer.append("gemarkung").append("='").append(getGemarkung()).append("' ");			
        buffer.append("plz").append("='").append(getPlz()).append("' ");			
        buffer.append("e32").append("='").append(getE32()).append("' ");			
        buffer.append("n32").append("='").append(getN32()).append("' ");			
        buffer.append("flur").append("='").append(getFlur()).append("' ");			
        buffer.append("flurstueck").append("='").append(getFlurstueck()).append("' ");			
        buffer.append("entgebid").append("='").append(getEntgebid()).append("' ");			
        buffer.append("strasseeigent").append("='").append(getStrasseeigent()).append("' ");			
        buffer.append("revidatum").append("='").append(getRevidatum()).append("' ");			
        buffer.append("revihandz").append("='").append(getRevihandz()).append("' ");			
        buffer.append("wassermenge").append("='").append(getWassermenge()).append("' ");			
        buffer.append("sachbe33rav").append("='").append(getSachbe33rav()).append("' ");			
        buffer.append("sachbe33hee").append("='").append(getSachbe33hee()).append("' ");			
        buffer.append("theGeom").append("='").append(getTheGeom()).append("' ");			
        buffer.append("enabled").append("='").append(isEnabled()).append("' ");			
        buffer.append("deleted").append("='").append(isDeleted()).append("' ");			
        buffer.append("objekts").append("='").append(getStandorts()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof Lage)) return false;
        return (this.getId().equals(
            ((Lage) other).getId()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getId() == null ?
            0 : this.getId().hashCode();
        result = result * 37 + idValue;
        return result;
    }
    
    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>Lage</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static Lage merge(Lage detachedInstance) {
        log.debug("Merging Lage instance " + detachedInstance);
        return (Lage) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        Lage saved = Lage.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this Lage with its new values.<br>
     * This is meant to be used after merging!
     * @param copy Lage
     */
    private void copy(Lage copy) {
        this.id = copy.getId();            
        this.standortgghwsg = copy.getStandortgghwsg();            
        this.wassereinzugsgebiet = copy.getWassereinzugsgebiet();            
        this.gemarkung = copy.getGemarkung();            
        this.plz = copy.getPlz();            
        this.e32 = copy.getE32();            
        this.n32 = copy.getN32();            
        this.flur = copy.getFlur();            
        this.flurstueck = copy.getFlurstueck();            
        this.entgebid = copy.getEntgebid();            
        this.strasseeigent = copy.getStrasseeigent();            
        this.revidatum = copy.getRevidatum();            
        this.revihandz = copy.getRevihandz();            
        this.wassermenge = copy.getWassermenge();            
        this.sachbe33rav = copy.getSachbe33rav();            
        this.sachbe33hee = copy.getSachbe33hee();            
        this.theGeom = copy.getTheGeom();            
        this.enabled = copy.isEnabled();            
        this.deleted = copy.isDeleted();            
        this.standorts = copy.getStandorts();            
    }    

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(Lage detachedInstance) {
        log.debug("Deleting Lage instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return Lage.delete(this);
    }

    /**
     * Find an <code>Lage</code> instance by its primary key
     * @param id the primary key value
     * @return <code>Lage</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static Lage findById(java.lang.Integer id) {
        log.debug("Getting Lage instance with id: " + id);
        return (Lage)
            new DatabaseAccess().get(Lage.class, id);
    }

    /**
     * Get a list of all <code>Lage</code>
     * @return <code>List&lt;Lage&gt;</code>
     *         all <code>Lage</code>
     */
    public static List<Lage> getAll() {
        return DatabaseQuery.getAll(new Lage());
    }

    /* Custom code goes below here! */

}
